
CPE301_Assignment04_partb.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000d56  00000dea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800122  00800122  00000e0c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e0c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009e2  00000000  00000000  00000f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cf  00000000  00000000  000018ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000523  00000000  00000000  000020b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  000025dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b3  00000000  00000000  000026e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ab  00000000  00000000  00002b93  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002e3e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 12 01 	jmp	0x224	; 0x224 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e5       	ldi	r30, 0x56	; 86
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e2       	ldi	r26, 0x22	; 34
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 32       	cpi	r26, 0x2F	; 47
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <main>
  9e:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_init>:
#define STARTSTOPBTN 0
#define REVERSEBTN 1

void adc_init(void)
{
	ADMUX = 0; // use ADC0
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0); // use AVcc as the reference. Input will be right justified
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // 128 pre-scale for 16Mhz
  b2:	ea e7       	ldi	r30, 0x7A	; 122
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	87 60       	ori	r24, 0x07	; 7
  ba:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN); // Enable the ADC
  bc:	80 81       	ld	r24, Z
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	80 83       	st	Z, r24

	ADCSRB = 0; // 0 for free running mode
  c2:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
  c6:	08 95       	ret

000000c8 <timer1_init>:
}

void timer1_init()
{
	TCCR1A = 0;
  c8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>

	// set up timer with CTC mode and prescaling = 64
	TCCR1B |= (1 << WGM12)|(1 << CS11)|(1 << CS10);
  cc:	e1 e8       	ldi	r30, 0x81	; 129
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	8b 60       	ori	r24, 0x0B	; 11
  d4:	80 83       	st	Z, r24
	
	// initialize counter
	TCNT1 = 0;
  d6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  da:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	 With prescalar = 64, the frequency 16,000,000 Hz / 64 -> period = 0.000004 s
	 TimerCount=Requireddelay/period -1
	 For example for 0.0020 s delay -> TimerCount = 0.002/0.000004 -1 = 499
	 Let's consider this as our temporary start value.
	*/
	OCR1A = 499; // value for 20 millisecond delay
  de:	83 ef       	ldi	r24, 0xF3	; 243
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  e6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	// enable compare interrupt
	TIMSK1 |= (1 << OCIE1A);
  ea:	ef e6       	ldi	r30, 0x6F	; 111
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	82 60       	ori	r24, 0x02	; 2
  f2:	80 83       	st	Z, r24
  f4:	08 95       	ret

000000f6 <debounce_polling>:
}

void debounce_polling(uint8_t btn)
{
	if (btn==STARTSTOPBTN)
  f6:	81 11       	cpse	r24, r1
  f8:	0e c0       	rjmp	.+28     	; 0x116 <debounce_polling+0x20>
	{
		while (bit_is_clear(PINC, 2))
  fa:	32 99       	sbic	0x06, 2	; 6
  fc:	1b c0       	rjmp	.+54     	; 0x134 <debounce_polling+0x3e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	89 ef       	ldi	r24, 0xF9	; 249
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	21 50       	subi	r18, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <debounce_polling+0xe>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <debounce_polling+0x18>
 10e:	00 00       	nop
 110:	32 9b       	sbis	0x06, 2	; 6
 112:	f5 cf       	rjmp	.-22     	; 0xfe <debounce_polling+0x8>
 114:	08 95       	ret
			_delay_ms(20);
	}
	else if(btn==REVERSEBTN)
 116:	81 30       	cpi	r24, 0x01	; 1
 118:	69 f4       	brne	.+26     	; 0x134 <debounce_polling+0x3e>
	{
		while (bit_is_clear(PINC, 1))
 11a:	31 99       	sbic	0x06, 1	; 6
 11c:	0b c0       	rjmp	.+22     	; 0x134 <debounce_polling+0x3e>
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	89 ef       	ldi	r24, 0xF9	; 249
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	21 50       	subi	r18, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <debounce_polling+0x2e>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <debounce_polling+0x38>
 12e:	00 00       	nop
 130:	31 9b       	sbis	0x06, 1	; 6
 132:	f5 cf       	rjmp	.-22     	; 0x11e <debounce_polling+0x28>
 134:	08 95       	ret

00000136 <__vector_11>:
		}
	}
}

ISR (TIMER1_COMPA_vect)
{
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
#ifdef ISDEBUGGING
	//USARTSendStr("interrupt\n"); Not to be used normally because will disturb the established delay.
#endif
		if (running && (steps_togo>0))
 144:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 148:	88 23       	and	r24, r24
 14a:	09 f4       	brne	.+2      	; 0x14e <__vector_11+0x18>
 14c:	51 c0       	rjmp	.+162    	; 0x1f0 <__vector_11+0xba>
 14e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <steps_togo>
 152:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <steps_togo+0x1>
 156:	89 2b       	or	r24, r25
 158:	09 f4       	brne	.+2      	; 0x15c <__vector_11+0x26>
 15a:	4a c0       	rjmp	.+148    	; 0x1f0 <__vector_11+0xba>
		{
			PORTB &= 0xF0;
 15c:	85 b1       	in	r24, 0x05	; 5
 15e:	80 7f       	andi	r24, 0xF0	; 240
 160:	85 b9       	out	0x05, r24	; 5
			switch(step)
 162:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <step>
 166:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <step+0x1>
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	91 05       	cpc	r25, r1
 16e:	59 f0       	breq	.+22     	; 0x186 <__vector_11+0x50>
 170:	30 f0       	brcs	.+12     	; 0x17e <__vector_11+0x48>
 172:	82 30       	cpi	r24, 0x02	; 2
 174:	91 05       	cpc	r25, r1
 176:	59 f0       	breq	.+22     	; 0x18e <__vector_11+0x58>
 178:	03 97       	sbiw	r24, 0x03	; 3
 17a:	69 f0       	breq	.+26     	; 0x196 <__vector_11+0x60>
 17c:	0f c0       	rjmp	.+30     	; 0x19c <__vector_11+0x66>
			{
				case 0:
					PORTB |= (1 << PORTB0) | (1 << PORTB2);
 17e:	85 b1       	in	r24, 0x05	; 5
 180:	85 60       	ori	r24, 0x05	; 5
 182:	85 b9       	out	0x05, r24	; 5
					break;
 184:	0b c0       	rjmp	.+22     	; 0x19c <__vector_11+0x66>
				case 1:
					PORTB |= (1 << PORTB1) | (1 << PORTB2);
 186:	85 b1       	in	r24, 0x05	; 5
 188:	86 60       	ori	r24, 0x06	; 6
 18a:	85 b9       	out	0x05, r24	; 5
					break;
 18c:	07 c0       	rjmp	.+14     	; 0x19c <__vector_11+0x66>
				case 2:
					PORTB |= (1 << PORTB1) | (1 << PORTB3);
 18e:	85 b1       	in	r24, 0x05	; 5
 190:	8a 60       	ori	r24, 0x0A	; 10
 192:	85 b9       	out	0x05, r24	; 5
					break;
 194:	03 c0       	rjmp	.+6      	; 0x19c <__vector_11+0x66>
				case 3:
					PORTB |= (1 << PORTB3) | (1 << PORTB0) ;
 196:	85 b1       	in	r24, 0x05	; 5
 198:	89 60       	ori	r24, 0x09	; 9
 19a:	85 b9       	out	0x05, r24	; 5
					break;
				default:
					break;
			}
			if (direction==FORWARD) step++;
 19c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	51 f4       	brne	.+20     	; 0x1b8 <__vector_11+0x82>
 1a4:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <step>
 1a8:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <step+0x1>
 1ac:	01 96       	adiw	r24, 0x01	; 1
 1ae:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <step+0x1>
 1b2:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <step>
 1b6:	09 c0       	rjmp	.+18     	; 0x1ca <__vector_11+0x94>
			else step--;
 1b8:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <step>
 1bc:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <step+0x1>
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <step+0x1>
 1c6:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <step>
			step = step % 4;
 1ca:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <step>
 1ce:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <step+0x1>
 1d2:	83 70       	andi	r24, 0x03	; 3
 1d4:	99 27       	eor	r25, r25
 1d6:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <step+0x1>
 1da:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <step>
			steps_togo--;
 1de:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <steps_togo>
 1e2:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <steps_togo+0x1>
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <steps_togo+0x1>
 1ec:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <steps_togo>
		}
}
 1f0:	9f 91       	pop	r25
 1f2:	8f 91       	pop	r24
 1f4:	0f 90       	pop	r0
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	0f 90       	pop	r0
 1fa:	1f 90       	pop	r1
 1fc:	18 95       	reti

000001fe <usart_init>:

#ifdef ISDEBUGGING
void usart_init()
{
	UBRR0H = (MYUBRR) >> 8;
 1fe:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = MYUBRR;
 202:	87 e6       	ldi	r24, 0x67	; 103
 204:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0); // Enable receiver and transmitter
 208:	e1 ec       	ldi	r30, 0xC1	; 193
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	88 61       	ori	r24, 0x18	; 24
 210:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0); // Enable receiver interrupt
 212:	80 81       	ld	r24, Z
 214:	80 68       	ori	r24, 0x80	; 128
 216:	80 83       	st	Z, r24
	UCSR0C |=  (1 << UCSZ01) | (1 << UCSZ00); // Set frame: 8data, 1 stop
 218:	e2 ec       	ldi	r30, 0xC2	; 194
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	86 60       	ori	r24, 0x06	; 6
 220:	80 83       	st	Z, r24
 222:	08 95       	ret

00000224 <__vector_18>:
	
}

ISR (USART_RX_vect)
{
 224:	1f 92       	push	r1
 226:	0f 92       	push	r0
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	0f 92       	push	r0
 22c:	11 24       	eor	r1, r1
 22e:	8f 93       	push	r24
 230:	ef 93       	push	r30
 232:	ff 93       	push	r31
	ReceivedChar = UDR0; // Read data from the RX buffer
 234:	e6 ec       	ldi	r30, 0xC6	; 198
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 81       	ld	r24, Z
 23a:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <ReceivedChar>
	
	UDR0 = ReceivedChar; // Write the data to the TX buffer
 23e:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <ReceivedChar>
 242:	80 83       	st	Z, r24
}
 244:	ff 91       	pop	r31
 246:	ef 91       	pop	r30
 248:	8f 91       	pop	r24
 24a:	0f 90       	pop	r0
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	0f 90       	pop	r0
 250:	1f 90       	pop	r1
 252:	18 95       	reti

00000254 <USART0SendByte>:

int USART0SendByte(char u8Data)
{
	//wait while previous byte is completed
	while(!(UCSR0A&(1<<UDRE0))){};
 254:	e0 ec       	ldi	r30, 0xC0	; 192
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	90 81       	ld	r25, Z
 25a:	95 ff       	sbrs	r25, 5
 25c:	fd cf       	rjmp	.-6      	; 0x258 <USART0SendByte+0x4>
	// Transmit data
	UDR0=u8Data;
 25e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 0;
}
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	08 95       	ret

00000268 <USARTSendStr>:

void USARTSendStr(char* _str)
{
 268:	ef 92       	push	r14
 26a:	ff 92       	push	r15
 26c:	0f 93       	push	r16
 26e:	1f 93       	push	r17
 270:	cf 93       	push	r28
	int thesize=strlen(_str);
 272:	fc 01       	movw	r30, r24
 274:	01 90       	ld	r0, Z+
 276:	00 20       	and	r0, r0
 278:	e9 f7       	brne	.-6      	; 0x274 <USARTSendStr+0xc>
 27a:	31 97       	sbiw	r30, 0x01	; 1
 27c:	8f 01       	movw	r16, r30
 27e:	08 1b       	sub	r16, r24
 280:	19 0b       	sbc	r17, r25
	for (uint8_t i=0; i<thesize;i++)
 282:	10 16       	cp	r1, r16
 284:	11 06       	cpc	r1, r17
 286:	74 f4       	brge	.+28     	; 0x2a4 <USARTSendStr+0x3c>
 288:	7c 01       	movw	r14, r24
 28a:	c0 e0       	ldi	r28, 0x00	; 0
	{
		USART0SendByte(_str[i]);
 28c:	f7 01       	movw	r30, r14
 28e:	ec 0f       	add	r30, r28
 290:	f1 1d       	adc	r31, r1
 292:	80 81       	ld	r24, Z
 294:	0e 94 2a 01 	call	0x254	; 0x254 <USART0SendByte>
}

void USARTSendStr(char* _str)
{
	int thesize=strlen(_str);
	for (uint8_t i=0; i<thesize;i++)
 298:	cf 5f       	subi	r28, 0xFF	; 255
 29a:	2c 2f       	mov	r18, r28
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	20 17       	cp	r18, r16
 2a0:	31 07       	cpc	r19, r17
 2a2:	a4 f3       	brlt	.-24     	; 0x28c <USARTSendStr+0x24>
	{
		USART0SendByte(_str[i]);
	}
}
 2a4:	cf 91       	pop	r28
 2a6:	1f 91       	pop	r17
 2a8:	0f 91       	pop	r16
 2aa:	ff 90       	pop	r15
 2ac:	ef 90       	pop	r14
 2ae:	08 95       	ret

000002b0 <main>:
		_delay_ms(20);
	}
}

int main(void)
{
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	cd b7       	in	r28, 0x3d	; 61
 2b6:	de b7       	in	r29, 0x3e	; 62
 2b8:	c0 58       	subi	r28, 0x80	; 128
 2ba:	d1 09       	sbc	r29, r1
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	f8 94       	cli
 2c0:	de bf       	out	0x3e, r29	; 62
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	cd bf       	out	0x3d, r28	; 61
	DDRC = 0x0;     // Clear all pins;
 2c6:	17 b8       	out	0x07, r1	; 7
	PORTC |= (1 << PORTC1) ; // Enables the pull-up of the reverse direction button
 2c8:	41 9a       	sbi	0x08, 1	; 8
	PORTC |= (1 << PORTC2) ; // Enables the pull-up of start stop button
 2ca:	42 9a       	sbi	0x08, 2	; 8
	DDRB |= (1<<DDB0) |  (1<<DDB1) |  (1<<DDB2) |  (1<<DDB3); // Set  PB0 to PB3 for output
 2cc:	84 b1       	in	r24, 0x04	; 4
 2ce:	8f 60       	ori	r24, 0x0F	; 15
 2d0:	84 b9       	out	0x04, r24	; 4

#ifdef ISDEBUGGING
	char printBuffer[128];
	usart_init();
 2d2:	0e 94 ff 00 	call	0x1fe	; 0x1fe <usart_init>
#endif
	timer1_init();
 2d6:	0e 94 64 00 	call	0xc8	; 0xc8 <timer1_init>
	adc_init();
 2da:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_init>
	sei();
 2de:	78 94       	sei
	

	while (1)
	{
		ADCSRA |= (1 << ADSC); // Start the ADC conversion
 2e0:	0a e7       	ldi	r16, 0x7A	; 122
 2e2:	10 e0       	ldi	r17, 0x00	; 0
		}
		if (bit_is_clear(PINC,1))
		{
			debounce_polling(REVERSEBTN);
			direction = direction == FORWARD ? REVERSE : FORWARD;
			steps_togo = TOTALSTEPS - steps_togo - 1;
 2e4:	0f 2e       	mov	r0, r31
 2e6:	f7 ec       	ldi	r31, 0xC7	; 199
 2e8:	af 2e       	mov	r10, r31
 2ea:	b1 2c       	mov	r11, r1
 2ec:	f0 2d       	mov	r31, r0
			step=0;
		}
		
		adc_value=ADCL;
 2ee:	0f 2e       	mov	r0, r31
 2f0:	f8 e7       	ldi	r31, 0x78	; 120
 2f2:	cf 2e       	mov	r12, r31
 2f4:	d1 2c       	mov	r13, r1
 2f6:	f0 2d       	mov	r31, r0
		adc_value = (ADCH<<8) + adc_value;
 2f8:	0f 2e       	mov	r0, r31
 2fa:	f9 e7       	ldi	r31, 0x79	; 121
 2fc:	ef 2e       	mov	r14, r31
 2fe:	f1 2c       	mov	r15, r1
 300:	f0 2d       	mov	r31, r0
		while (ADCSRA	&	(1<<ADSC));
		
		if (bit_is_clear(PINC,2))
		{
			debounce_polling(STARTSTOPBTN);
			running=!running;
 302:	77 24       	eor	r7, r7
 304:	73 94       	inc	r7
		}
		if (bit_is_clear(PINC,1))
		{
			debounce_polling(REVERSEBTN);
			direction = direction == FORWARD ? REVERSE : FORWARD;
 306:	66 24       	eor	r6, r6
 308:	6a 94       	dec	r6
			/*
				We establish a range between 2 milliseconds and 20 milliseconds delay.
				This corresponds to OCR1A values between 499 and 4999 (see above our reasoning)
			*/
			uint16_t ocr_value = 499+(double)adc_value*((double)(4999-499)/1024);
			TCNT1 = 0;
 30a:	0f 2e       	mov	r0, r31
 30c:	f4 e8       	ldi	r31, 0x84	; 132
 30e:	4f 2e       	mov	r4, r31
 310:	51 2c       	mov	r5, r1
 312:	f0 2d       	mov	r31, r0
			OCR1A = ocr_value;
			
			#ifdef ISDEBUGGING
				sprintf(printBuffer, "adc_value %d ocr_value is %d\n",(int)adc_value, (int)ocr_value );
 314:	9e 01       	movw	r18, r28
 316:	2f 5f       	subi	r18, 0xFF	; 255
 318:	3f 4f       	sbci	r19, 0xFF	; 255
 31a:	49 01       	movw	r8, r18
	sei();
	

	while (1)
	{
		ADCSRA |= (1 << ADSC); // Start the ADC conversion
 31c:	f8 01       	movw	r30, r16
 31e:	80 81       	ld	r24, Z
 320:	80 64       	ori	r24, 0x40	; 64
 322:	80 83       	st	Z, r24
		while (ADCSRA	&	(1<<ADSC));
 324:	f8 01       	movw	r30, r16
 326:	80 81       	ld	r24, Z
 328:	86 fd       	sbrc	r24, 6
 32a:	fc cf       	rjmp	.-8      	; 0x324 <main+0x74>
		
		if (bit_is_clear(PINC,2))
 32c:	32 99       	sbic	0x06, 2	; 6
 32e:	0a c0       	rjmp	.+20     	; 0x344 <main+0x94>
		{
			debounce_polling(STARTSTOPBTN);
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	0e 94 7b 00 	call	0xf6	; 0xf6 <debounce_polling>
			running=!running;
 336:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <__data_end>
 33a:	87 2d       	mov	r24, r7
 33c:	91 11       	cpse	r25, r1
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
		}
		if (bit_is_clear(PINC,1))
 344:	31 99       	sbic	0x06, 1	; 6
 346:	1b c0       	rjmp	.+54     	; 0x37e <main+0xce>
		{
			debounce_polling(REVERSEBTN);
 348:	87 2d       	mov	r24, r7
 34a:	0e 94 7b 00 	call	0xf6	; 0xf6 <debounce_polling>
			direction = direction == FORWARD ? REVERSE : FORWARD;
 34e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 352:	81 30       	cpi	r24, 0x01	; 1
 354:	11 f0       	breq	.+4      	; 0x35a <main+0xaa>
 356:	87 2d       	mov	r24, r7
 358:	01 c0       	rjmp	.+2      	; 0x35c <main+0xac>
 35a:	86 2d       	mov	r24, r6
 35c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			steps_togo = TOTALSTEPS - steps_togo - 1;
 360:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <steps_togo>
 364:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <steps_togo+0x1>
 368:	95 01       	movw	r18, r10
 36a:	28 1b       	sub	r18, r24
 36c:	39 0b       	sbc	r19, r25
 36e:	30 93 02 01 	sts	0x0102, r19	; 0x800102 <steps_togo+0x1>
 372:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <steps_togo>
			step=0;
 376:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <step+0x1>
 37a:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <step>
		}
		
		adc_value=ADCL;
 37e:	f6 01       	movw	r30, r12
 380:	80 81       	ld	r24, Z
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <adc_value+0x1>
 388:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <adc_value>
		adc_value = (ADCH<<8) + adc_value;
 38c:	f7 01       	movw	r30, r14
 38e:	90 81       	ld	r25, Z
 390:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <adc_value>
 394:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <adc_value+0x1>
 398:	89 2f       	mov	r24, r25
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	98 2f       	mov	r25, r24
 39e:	88 27       	eor	r24, r24
 3a0:	82 0f       	add	r24, r18
 3a2:	93 1f       	adc	r25, r19
 3a4:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <adc_value+0x1>
 3a8:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <adc_value>
			
		if (abs(adc_value-old_adc_value)>1)
 3ac:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <adc_value>
 3b0:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <adc_value+0x1>
 3b4:	20 91 25 01 	lds	r18, 0x0125	; 0x800125 <old_adc_value>
 3b8:	30 91 26 01 	lds	r19, 0x0126	; 0x800126 <old_adc_value+0x1>
 3bc:	82 1b       	sub	r24, r18
 3be:	93 0b       	sbc	r25, r19
 3c0:	9c 01       	movw	r18, r24
 3c2:	22 f4       	brpl	.+8      	; 0x3cc <main+0x11c>
 3c4:	22 27       	eor	r18, r18
 3c6:	33 27       	eor	r19, r19
 3c8:	28 1b       	sub	r18, r24
 3ca:	39 0b       	sbc	r19, r25
 3cc:	22 30       	cpi	r18, 0x02	; 2
 3ce:	31 05       	cpc	r19, r1
 3d0:	0c f4       	brge	.+2      	; 0x3d4 <main+0x124>
 3d2:	a4 cf       	rjmp	.-184    	; 0x31c <main+0x6c>
		{
			old_adc_value=adc_value;
 3d4:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <adc_value>
 3d8:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <adc_value+0x1>
 3dc:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <old_adc_value+0x1>
 3e0:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <old_adc_value>
			/*
				We establish a range between 2 milliseconds and 20 milliseconds delay.
				This corresponds to OCR1A values between 499 and 4999 (see above our reasoning)
			*/
			uint16_t ocr_value = 499+(double)adc_value*((double)(4999-499)/1024);
 3e4:	60 91 27 01 	lds	r22, 0x0127	; 0x800127 <adc_value>
 3e8:	70 91 28 01 	lds	r23, 0x0128	; 0x800128 <adc_value+0x1>
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 c4 02 	call	0x588	; 0x588 <__floatunsisf>
 3f4:	20 e0       	ldi	r18, 0x00	; 0
 3f6:	30 ea       	ldi	r19, 0xA0	; 160
 3f8:	4c e8       	ldi	r20, 0x8C	; 140
 3fa:	50 e4       	ldi	r21, 0x40	; 64
 3fc:	0e 94 52 03 	call	0x6a4	; 0x6a4 <__mulsf3>
 400:	20 e0       	ldi	r18, 0x00	; 0
 402:	30 e8       	ldi	r19, 0x80	; 128
 404:	49 ef       	ldi	r20, 0xF9	; 249
 406:	53 e4       	ldi	r21, 0x43	; 67
 408:	0e 94 29 02 	call	0x452	; 0x452 <__addsf3>
 40c:	0e 94 95 02 	call	0x52a	; 0x52a <__fixunssfsi>
			TCNT1 = 0;
 410:	f2 01       	movw	r30, r4
 412:	11 82       	std	Z+1, r1	; 0x01
 414:	10 82       	st	Z, r1
			OCR1A = ocr_value;
 416:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 41a:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
			
			#ifdef ISDEBUGGING
				sprintf(printBuffer, "adc_value %d ocr_value is %d\n",(int)adc_value, (int)ocr_value );
 41e:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <adc_value>
 422:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <adc_value+0x1>
 426:	7f 93       	push	r23
 428:	6f 93       	push	r22
 42a:	3f 93       	push	r19
 42c:	2f 93       	push	r18
 42e:	83 e0       	ldi	r24, 0x03	; 3
 430:	91 e0       	ldi	r25, 0x01	; 1
 432:	9f 93       	push	r25
 434:	8f 93       	push	r24
 436:	9f 92       	push	r9
 438:	8f 92       	push	r8
 43a:	0e 94 bf 03 	call	0x77e	; 0x77e <sprintf>
				USARTSendStr(printBuffer);
 43e:	c4 01       	movw	r24, r8
 440:	0e 94 34 01 	call	0x268	; 0x268 <USARTSendStr>
 444:	0f b6       	in	r0, 0x3f	; 63
 446:	f8 94       	cli
 448:	de bf       	out	0x3e, r29	; 62
 44a:	0f be       	out	0x3f, r0	; 63
 44c:	cd bf       	out	0x3d, r28	; 61
 44e:	66 cf       	rjmp	.-308    	; 0x31c <main+0x6c>

00000450 <__subsf3>:
 450:	50 58       	subi	r21, 0x80	; 128

00000452 <__addsf3>:
 452:	bb 27       	eor	r27, r27
 454:	aa 27       	eor	r26, r26
 456:	0e 94 40 02 	call	0x480	; 0x480 <__addsf3x>
 45a:	0c 94 18 03 	jmp	0x630	; 0x630 <__fp_round>
 45e:	0e 94 0a 03 	call	0x614	; 0x614 <__fp_pscA>
 462:	38 f0       	brcs	.+14     	; 0x472 <__addsf3+0x20>
 464:	0e 94 11 03 	call	0x622	; 0x622 <__fp_pscB>
 468:	20 f0       	brcs	.+8      	; 0x472 <__addsf3+0x20>
 46a:	39 f4       	brne	.+14     	; 0x47a <__addsf3+0x28>
 46c:	9f 3f       	cpi	r25, 0xFF	; 255
 46e:	19 f4       	brne	.+6      	; 0x476 <__addsf3+0x24>
 470:	26 f4       	brtc	.+8      	; 0x47a <__addsf3+0x28>
 472:	0c 94 07 03 	jmp	0x60e	; 0x60e <__fp_nan>
 476:	0e f4       	brtc	.+2      	; 0x47a <__addsf3+0x28>
 478:	e0 95       	com	r30
 47a:	e7 fb       	bst	r30, 7
 47c:	0c 94 01 03 	jmp	0x602	; 0x602 <__fp_inf>

00000480 <__addsf3x>:
 480:	e9 2f       	mov	r30, r25
 482:	0e 94 29 03 	call	0x652	; 0x652 <__fp_split3>
 486:	58 f3       	brcs	.-42     	; 0x45e <__addsf3+0xc>
 488:	ba 17       	cp	r27, r26
 48a:	62 07       	cpc	r22, r18
 48c:	73 07       	cpc	r23, r19
 48e:	84 07       	cpc	r24, r20
 490:	95 07       	cpc	r25, r21
 492:	20 f0       	brcs	.+8      	; 0x49c <__addsf3x+0x1c>
 494:	79 f4       	brne	.+30     	; 0x4b4 <__addsf3x+0x34>
 496:	a6 f5       	brtc	.+104    	; 0x500 <__addsf3x+0x80>
 498:	0c 94 4b 03 	jmp	0x696	; 0x696 <__fp_zero>
 49c:	0e f4       	brtc	.+2      	; 0x4a0 <__addsf3x+0x20>
 49e:	e0 95       	com	r30
 4a0:	0b 2e       	mov	r0, r27
 4a2:	ba 2f       	mov	r27, r26
 4a4:	a0 2d       	mov	r26, r0
 4a6:	0b 01       	movw	r0, r22
 4a8:	b9 01       	movw	r22, r18
 4aa:	90 01       	movw	r18, r0
 4ac:	0c 01       	movw	r0, r24
 4ae:	ca 01       	movw	r24, r20
 4b0:	a0 01       	movw	r20, r0
 4b2:	11 24       	eor	r1, r1
 4b4:	ff 27       	eor	r31, r31
 4b6:	59 1b       	sub	r21, r25
 4b8:	99 f0       	breq	.+38     	; 0x4e0 <__addsf3x+0x60>
 4ba:	59 3f       	cpi	r21, 0xF9	; 249
 4bc:	50 f4       	brcc	.+20     	; 0x4d2 <__addsf3x+0x52>
 4be:	50 3e       	cpi	r21, 0xE0	; 224
 4c0:	68 f1       	brcs	.+90     	; 0x51c <__addsf3x+0x9c>
 4c2:	1a 16       	cp	r1, r26
 4c4:	f0 40       	sbci	r31, 0x00	; 0
 4c6:	a2 2f       	mov	r26, r18
 4c8:	23 2f       	mov	r18, r19
 4ca:	34 2f       	mov	r19, r20
 4cc:	44 27       	eor	r20, r20
 4ce:	58 5f       	subi	r21, 0xF8	; 248
 4d0:	f3 cf       	rjmp	.-26     	; 0x4b8 <__addsf3x+0x38>
 4d2:	46 95       	lsr	r20
 4d4:	37 95       	ror	r19
 4d6:	27 95       	ror	r18
 4d8:	a7 95       	ror	r26
 4da:	f0 40       	sbci	r31, 0x00	; 0
 4dc:	53 95       	inc	r21
 4de:	c9 f7       	brne	.-14     	; 0x4d2 <__addsf3x+0x52>
 4e0:	7e f4       	brtc	.+30     	; 0x500 <__addsf3x+0x80>
 4e2:	1f 16       	cp	r1, r31
 4e4:	ba 0b       	sbc	r27, r26
 4e6:	62 0b       	sbc	r22, r18
 4e8:	73 0b       	sbc	r23, r19
 4ea:	84 0b       	sbc	r24, r20
 4ec:	ba f0       	brmi	.+46     	; 0x51c <__addsf3x+0x9c>
 4ee:	91 50       	subi	r25, 0x01	; 1
 4f0:	a1 f0       	breq	.+40     	; 0x51a <__addsf3x+0x9a>
 4f2:	ff 0f       	add	r31, r31
 4f4:	bb 1f       	adc	r27, r27
 4f6:	66 1f       	adc	r22, r22
 4f8:	77 1f       	adc	r23, r23
 4fa:	88 1f       	adc	r24, r24
 4fc:	c2 f7       	brpl	.-16     	; 0x4ee <__addsf3x+0x6e>
 4fe:	0e c0       	rjmp	.+28     	; 0x51c <__addsf3x+0x9c>
 500:	ba 0f       	add	r27, r26
 502:	62 1f       	adc	r22, r18
 504:	73 1f       	adc	r23, r19
 506:	84 1f       	adc	r24, r20
 508:	48 f4       	brcc	.+18     	; 0x51c <__addsf3x+0x9c>
 50a:	87 95       	ror	r24
 50c:	77 95       	ror	r23
 50e:	67 95       	ror	r22
 510:	b7 95       	ror	r27
 512:	f7 95       	ror	r31
 514:	9e 3f       	cpi	r25, 0xFE	; 254
 516:	08 f0       	brcs	.+2      	; 0x51a <__addsf3x+0x9a>
 518:	b0 cf       	rjmp	.-160    	; 0x47a <__addsf3+0x28>
 51a:	93 95       	inc	r25
 51c:	88 0f       	add	r24, r24
 51e:	08 f0       	brcs	.+2      	; 0x522 <__addsf3x+0xa2>
 520:	99 27       	eor	r25, r25
 522:	ee 0f       	add	r30, r30
 524:	97 95       	ror	r25
 526:	87 95       	ror	r24
 528:	08 95       	ret

0000052a <__fixunssfsi>:
 52a:	0e 94 31 03 	call	0x662	; 0x662 <__fp_splitA>
 52e:	88 f0       	brcs	.+34     	; 0x552 <__fixunssfsi+0x28>
 530:	9f 57       	subi	r25, 0x7F	; 127
 532:	98 f0       	brcs	.+38     	; 0x55a <__fixunssfsi+0x30>
 534:	b9 2f       	mov	r27, r25
 536:	99 27       	eor	r25, r25
 538:	b7 51       	subi	r27, 0x17	; 23
 53a:	b0 f0       	brcs	.+44     	; 0x568 <__fixunssfsi+0x3e>
 53c:	e1 f0       	breq	.+56     	; 0x576 <__fixunssfsi+0x4c>
 53e:	66 0f       	add	r22, r22
 540:	77 1f       	adc	r23, r23
 542:	88 1f       	adc	r24, r24
 544:	99 1f       	adc	r25, r25
 546:	1a f0       	brmi	.+6      	; 0x54e <__fixunssfsi+0x24>
 548:	ba 95       	dec	r27
 54a:	c9 f7       	brne	.-14     	; 0x53e <__fixunssfsi+0x14>
 54c:	14 c0       	rjmp	.+40     	; 0x576 <__fixunssfsi+0x4c>
 54e:	b1 30       	cpi	r27, 0x01	; 1
 550:	91 f0       	breq	.+36     	; 0x576 <__fixunssfsi+0x4c>
 552:	0e 94 4b 03 	call	0x696	; 0x696 <__fp_zero>
 556:	b1 e0       	ldi	r27, 0x01	; 1
 558:	08 95       	ret
 55a:	0c 94 4b 03 	jmp	0x696	; 0x696 <__fp_zero>
 55e:	67 2f       	mov	r22, r23
 560:	78 2f       	mov	r23, r24
 562:	88 27       	eor	r24, r24
 564:	b8 5f       	subi	r27, 0xF8	; 248
 566:	39 f0       	breq	.+14     	; 0x576 <__fixunssfsi+0x4c>
 568:	b9 3f       	cpi	r27, 0xF9	; 249
 56a:	cc f3       	brlt	.-14     	; 0x55e <__fixunssfsi+0x34>
 56c:	86 95       	lsr	r24
 56e:	77 95       	ror	r23
 570:	67 95       	ror	r22
 572:	b3 95       	inc	r27
 574:	d9 f7       	brne	.-10     	; 0x56c <__fixunssfsi+0x42>
 576:	3e f4       	brtc	.+14     	; 0x586 <__fixunssfsi+0x5c>
 578:	90 95       	com	r25
 57a:	80 95       	com	r24
 57c:	70 95       	com	r23
 57e:	61 95       	neg	r22
 580:	7f 4f       	sbci	r23, 0xFF	; 255
 582:	8f 4f       	sbci	r24, 0xFF	; 255
 584:	9f 4f       	sbci	r25, 0xFF	; 255
 586:	08 95       	ret

00000588 <__floatunsisf>:
 588:	e8 94       	clt
 58a:	09 c0       	rjmp	.+18     	; 0x59e <__floatsisf+0x12>

0000058c <__floatsisf>:
 58c:	97 fb       	bst	r25, 7
 58e:	3e f4       	brtc	.+14     	; 0x59e <__floatsisf+0x12>
 590:	90 95       	com	r25
 592:	80 95       	com	r24
 594:	70 95       	com	r23
 596:	61 95       	neg	r22
 598:	7f 4f       	sbci	r23, 0xFF	; 255
 59a:	8f 4f       	sbci	r24, 0xFF	; 255
 59c:	9f 4f       	sbci	r25, 0xFF	; 255
 59e:	99 23       	and	r25, r25
 5a0:	a9 f0       	breq	.+42     	; 0x5cc <__floatsisf+0x40>
 5a2:	f9 2f       	mov	r31, r25
 5a4:	96 e9       	ldi	r25, 0x96	; 150
 5a6:	bb 27       	eor	r27, r27
 5a8:	93 95       	inc	r25
 5aa:	f6 95       	lsr	r31
 5ac:	87 95       	ror	r24
 5ae:	77 95       	ror	r23
 5b0:	67 95       	ror	r22
 5b2:	b7 95       	ror	r27
 5b4:	f1 11       	cpse	r31, r1
 5b6:	f8 cf       	rjmp	.-16     	; 0x5a8 <__floatsisf+0x1c>
 5b8:	fa f4       	brpl	.+62     	; 0x5f8 <__floatsisf+0x6c>
 5ba:	bb 0f       	add	r27, r27
 5bc:	11 f4       	brne	.+4      	; 0x5c2 <__floatsisf+0x36>
 5be:	60 ff       	sbrs	r22, 0
 5c0:	1b c0       	rjmp	.+54     	; 0x5f8 <__floatsisf+0x6c>
 5c2:	6f 5f       	subi	r22, 0xFF	; 255
 5c4:	7f 4f       	sbci	r23, 0xFF	; 255
 5c6:	8f 4f       	sbci	r24, 0xFF	; 255
 5c8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ca:	16 c0       	rjmp	.+44     	; 0x5f8 <__floatsisf+0x6c>
 5cc:	88 23       	and	r24, r24
 5ce:	11 f0       	breq	.+4      	; 0x5d4 <__floatsisf+0x48>
 5d0:	96 e9       	ldi	r25, 0x96	; 150
 5d2:	11 c0       	rjmp	.+34     	; 0x5f6 <__floatsisf+0x6a>
 5d4:	77 23       	and	r23, r23
 5d6:	21 f0       	breq	.+8      	; 0x5e0 <__floatsisf+0x54>
 5d8:	9e e8       	ldi	r25, 0x8E	; 142
 5da:	87 2f       	mov	r24, r23
 5dc:	76 2f       	mov	r23, r22
 5de:	05 c0       	rjmp	.+10     	; 0x5ea <__floatsisf+0x5e>
 5e0:	66 23       	and	r22, r22
 5e2:	71 f0       	breq	.+28     	; 0x600 <__floatsisf+0x74>
 5e4:	96 e8       	ldi	r25, 0x86	; 134
 5e6:	86 2f       	mov	r24, r22
 5e8:	70 e0       	ldi	r23, 0x00	; 0
 5ea:	60 e0       	ldi	r22, 0x00	; 0
 5ec:	2a f0       	brmi	.+10     	; 0x5f8 <__floatsisf+0x6c>
 5ee:	9a 95       	dec	r25
 5f0:	66 0f       	add	r22, r22
 5f2:	77 1f       	adc	r23, r23
 5f4:	88 1f       	adc	r24, r24
 5f6:	da f7       	brpl	.-10     	; 0x5ee <__floatsisf+0x62>
 5f8:	88 0f       	add	r24, r24
 5fa:	96 95       	lsr	r25
 5fc:	87 95       	ror	r24
 5fe:	97 f9       	bld	r25, 7
 600:	08 95       	ret

00000602 <__fp_inf>:
 602:	97 f9       	bld	r25, 7
 604:	9f 67       	ori	r25, 0x7F	; 127
 606:	80 e8       	ldi	r24, 0x80	; 128
 608:	70 e0       	ldi	r23, 0x00	; 0
 60a:	60 e0       	ldi	r22, 0x00	; 0
 60c:	08 95       	ret

0000060e <__fp_nan>:
 60e:	9f ef       	ldi	r25, 0xFF	; 255
 610:	80 ec       	ldi	r24, 0xC0	; 192
 612:	08 95       	ret

00000614 <__fp_pscA>:
 614:	00 24       	eor	r0, r0
 616:	0a 94       	dec	r0
 618:	16 16       	cp	r1, r22
 61a:	17 06       	cpc	r1, r23
 61c:	18 06       	cpc	r1, r24
 61e:	09 06       	cpc	r0, r25
 620:	08 95       	ret

00000622 <__fp_pscB>:
 622:	00 24       	eor	r0, r0
 624:	0a 94       	dec	r0
 626:	12 16       	cp	r1, r18
 628:	13 06       	cpc	r1, r19
 62a:	14 06       	cpc	r1, r20
 62c:	05 06       	cpc	r0, r21
 62e:	08 95       	ret

00000630 <__fp_round>:
 630:	09 2e       	mov	r0, r25
 632:	03 94       	inc	r0
 634:	00 0c       	add	r0, r0
 636:	11 f4       	brne	.+4      	; 0x63c <__fp_round+0xc>
 638:	88 23       	and	r24, r24
 63a:	52 f0       	brmi	.+20     	; 0x650 <__fp_round+0x20>
 63c:	bb 0f       	add	r27, r27
 63e:	40 f4       	brcc	.+16     	; 0x650 <__fp_round+0x20>
 640:	bf 2b       	or	r27, r31
 642:	11 f4       	brne	.+4      	; 0x648 <__fp_round+0x18>
 644:	60 ff       	sbrs	r22, 0
 646:	04 c0       	rjmp	.+8      	; 0x650 <__fp_round+0x20>
 648:	6f 5f       	subi	r22, 0xFF	; 255
 64a:	7f 4f       	sbci	r23, 0xFF	; 255
 64c:	8f 4f       	sbci	r24, 0xFF	; 255
 64e:	9f 4f       	sbci	r25, 0xFF	; 255
 650:	08 95       	ret

00000652 <__fp_split3>:
 652:	57 fd       	sbrc	r21, 7
 654:	90 58       	subi	r25, 0x80	; 128
 656:	44 0f       	add	r20, r20
 658:	55 1f       	adc	r21, r21
 65a:	59 f0       	breq	.+22     	; 0x672 <__fp_splitA+0x10>
 65c:	5f 3f       	cpi	r21, 0xFF	; 255
 65e:	71 f0       	breq	.+28     	; 0x67c <__fp_splitA+0x1a>
 660:	47 95       	ror	r20

00000662 <__fp_splitA>:
 662:	88 0f       	add	r24, r24
 664:	97 fb       	bst	r25, 7
 666:	99 1f       	adc	r25, r25
 668:	61 f0       	breq	.+24     	; 0x682 <__fp_splitA+0x20>
 66a:	9f 3f       	cpi	r25, 0xFF	; 255
 66c:	79 f0       	breq	.+30     	; 0x68c <__fp_splitA+0x2a>
 66e:	87 95       	ror	r24
 670:	08 95       	ret
 672:	12 16       	cp	r1, r18
 674:	13 06       	cpc	r1, r19
 676:	14 06       	cpc	r1, r20
 678:	55 1f       	adc	r21, r21
 67a:	f2 cf       	rjmp	.-28     	; 0x660 <__fp_split3+0xe>
 67c:	46 95       	lsr	r20
 67e:	f1 df       	rcall	.-30     	; 0x662 <__fp_splitA>
 680:	08 c0       	rjmp	.+16     	; 0x692 <__fp_splitA+0x30>
 682:	16 16       	cp	r1, r22
 684:	17 06       	cpc	r1, r23
 686:	18 06       	cpc	r1, r24
 688:	99 1f       	adc	r25, r25
 68a:	f1 cf       	rjmp	.-30     	; 0x66e <__fp_splitA+0xc>
 68c:	86 95       	lsr	r24
 68e:	71 05       	cpc	r23, r1
 690:	61 05       	cpc	r22, r1
 692:	08 94       	sec
 694:	08 95       	ret

00000696 <__fp_zero>:
 696:	e8 94       	clt

00000698 <__fp_szero>:
 698:	bb 27       	eor	r27, r27
 69a:	66 27       	eor	r22, r22
 69c:	77 27       	eor	r23, r23
 69e:	cb 01       	movw	r24, r22
 6a0:	97 f9       	bld	r25, 7
 6a2:	08 95       	ret

000006a4 <__mulsf3>:
 6a4:	0e 94 65 03 	call	0x6ca	; 0x6ca <__mulsf3x>
 6a8:	0c 94 18 03 	jmp	0x630	; 0x630 <__fp_round>
 6ac:	0e 94 0a 03 	call	0x614	; 0x614 <__fp_pscA>
 6b0:	38 f0       	brcs	.+14     	; 0x6c0 <__mulsf3+0x1c>
 6b2:	0e 94 11 03 	call	0x622	; 0x622 <__fp_pscB>
 6b6:	20 f0       	brcs	.+8      	; 0x6c0 <__mulsf3+0x1c>
 6b8:	95 23       	and	r25, r21
 6ba:	11 f0       	breq	.+4      	; 0x6c0 <__mulsf3+0x1c>
 6bc:	0c 94 01 03 	jmp	0x602	; 0x602 <__fp_inf>
 6c0:	0c 94 07 03 	jmp	0x60e	; 0x60e <__fp_nan>
 6c4:	11 24       	eor	r1, r1
 6c6:	0c 94 4c 03 	jmp	0x698	; 0x698 <__fp_szero>

000006ca <__mulsf3x>:
 6ca:	0e 94 29 03 	call	0x652	; 0x652 <__fp_split3>
 6ce:	70 f3       	brcs	.-36     	; 0x6ac <__mulsf3+0x8>

000006d0 <__mulsf3_pse>:
 6d0:	95 9f       	mul	r25, r21
 6d2:	c1 f3       	breq	.-16     	; 0x6c4 <__mulsf3+0x20>
 6d4:	95 0f       	add	r25, r21
 6d6:	50 e0       	ldi	r21, 0x00	; 0
 6d8:	55 1f       	adc	r21, r21
 6da:	62 9f       	mul	r22, r18
 6dc:	f0 01       	movw	r30, r0
 6de:	72 9f       	mul	r23, r18
 6e0:	bb 27       	eor	r27, r27
 6e2:	f0 0d       	add	r31, r0
 6e4:	b1 1d       	adc	r27, r1
 6e6:	63 9f       	mul	r22, r19
 6e8:	aa 27       	eor	r26, r26
 6ea:	f0 0d       	add	r31, r0
 6ec:	b1 1d       	adc	r27, r1
 6ee:	aa 1f       	adc	r26, r26
 6f0:	64 9f       	mul	r22, r20
 6f2:	66 27       	eor	r22, r22
 6f4:	b0 0d       	add	r27, r0
 6f6:	a1 1d       	adc	r26, r1
 6f8:	66 1f       	adc	r22, r22
 6fa:	82 9f       	mul	r24, r18
 6fc:	22 27       	eor	r18, r18
 6fe:	b0 0d       	add	r27, r0
 700:	a1 1d       	adc	r26, r1
 702:	62 1f       	adc	r22, r18
 704:	73 9f       	mul	r23, r19
 706:	b0 0d       	add	r27, r0
 708:	a1 1d       	adc	r26, r1
 70a:	62 1f       	adc	r22, r18
 70c:	83 9f       	mul	r24, r19
 70e:	a0 0d       	add	r26, r0
 710:	61 1d       	adc	r22, r1
 712:	22 1f       	adc	r18, r18
 714:	74 9f       	mul	r23, r20
 716:	33 27       	eor	r19, r19
 718:	a0 0d       	add	r26, r0
 71a:	61 1d       	adc	r22, r1
 71c:	23 1f       	adc	r18, r19
 71e:	84 9f       	mul	r24, r20
 720:	60 0d       	add	r22, r0
 722:	21 1d       	adc	r18, r1
 724:	82 2f       	mov	r24, r18
 726:	76 2f       	mov	r23, r22
 728:	6a 2f       	mov	r22, r26
 72a:	11 24       	eor	r1, r1
 72c:	9f 57       	subi	r25, 0x7F	; 127
 72e:	50 40       	sbci	r21, 0x00	; 0
 730:	9a f0       	brmi	.+38     	; 0x758 <__mulsf3_pse+0x88>
 732:	f1 f0       	breq	.+60     	; 0x770 <__mulsf3_pse+0xa0>
 734:	88 23       	and	r24, r24
 736:	4a f0       	brmi	.+18     	; 0x74a <__mulsf3_pse+0x7a>
 738:	ee 0f       	add	r30, r30
 73a:	ff 1f       	adc	r31, r31
 73c:	bb 1f       	adc	r27, r27
 73e:	66 1f       	adc	r22, r22
 740:	77 1f       	adc	r23, r23
 742:	88 1f       	adc	r24, r24
 744:	91 50       	subi	r25, 0x01	; 1
 746:	50 40       	sbci	r21, 0x00	; 0
 748:	a9 f7       	brne	.-22     	; 0x734 <__mulsf3_pse+0x64>
 74a:	9e 3f       	cpi	r25, 0xFE	; 254
 74c:	51 05       	cpc	r21, r1
 74e:	80 f0       	brcs	.+32     	; 0x770 <__mulsf3_pse+0xa0>
 750:	0c 94 01 03 	jmp	0x602	; 0x602 <__fp_inf>
 754:	0c 94 4c 03 	jmp	0x698	; 0x698 <__fp_szero>
 758:	5f 3f       	cpi	r21, 0xFF	; 255
 75a:	e4 f3       	brlt	.-8      	; 0x754 <__mulsf3_pse+0x84>
 75c:	98 3e       	cpi	r25, 0xE8	; 232
 75e:	d4 f3       	brlt	.-12     	; 0x754 <__mulsf3_pse+0x84>
 760:	86 95       	lsr	r24
 762:	77 95       	ror	r23
 764:	67 95       	ror	r22
 766:	b7 95       	ror	r27
 768:	f7 95       	ror	r31
 76a:	e7 95       	ror	r30
 76c:	9f 5f       	subi	r25, 0xFF	; 255
 76e:	c1 f7       	brne	.-16     	; 0x760 <__mulsf3_pse+0x90>
 770:	fe 2b       	or	r31, r30
 772:	88 0f       	add	r24, r24
 774:	91 1d       	adc	r25, r1
 776:	96 95       	lsr	r25
 778:	87 95       	ror	r24
 77a:	97 f9       	bld	r25, 7
 77c:	08 95       	ret

0000077e <sprintf>:
 77e:	ae e0       	ldi	r26, 0x0E	; 14
 780:	b0 e0       	ldi	r27, 0x00	; 0
 782:	e5 ec       	ldi	r30, 0xC5	; 197
 784:	f3 e0       	ldi	r31, 0x03	; 3
 786:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__prologue_saves__+0x1c>
 78a:	0d 89       	ldd	r16, Y+21	; 0x15
 78c:	1e 89       	ldd	r17, Y+22	; 0x16
 78e:	86 e0       	ldi	r24, 0x06	; 6
 790:	8c 83       	std	Y+4, r24	; 0x04
 792:	1a 83       	std	Y+2, r17	; 0x02
 794:	09 83       	std	Y+1, r16	; 0x01
 796:	8f ef       	ldi	r24, 0xFF	; 255
 798:	9f e7       	ldi	r25, 0x7F	; 127
 79a:	9e 83       	std	Y+6, r25	; 0x06
 79c:	8d 83       	std	Y+5, r24	; 0x05
 79e:	ae 01       	movw	r20, r28
 7a0:	47 5e       	subi	r20, 0xE7	; 231
 7a2:	5f 4f       	sbci	r21, 0xFF	; 255
 7a4:	6f 89       	ldd	r22, Y+23	; 0x17
 7a6:	78 8d       	ldd	r23, Y+24	; 0x18
 7a8:	ce 01       	movw	r24, r28
 7aa:	01 96       	adiw	r24, 0x01	; 1
 7ac:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <vfprintf>
 7b0:	ef 81       	ldd	r30, Y+7	; 0x07
 7b2:	f8 85       	ldd	r31, Y+8	; 0x08
 7b4:	e0 0f       	add	r30, r16
 7b6:	f1 1f       	adc	r31, r17
 7b8:	10 82       	st	Z, r1
 7ba:	2e 96       	adiw	r28, 0x0e	; 14
 7bc:	e4 e0       	ldi	r30, 0x04	; 4
 7be:	0c 94 9c 06 	jmp	0xd38	; 0xd38 <__epilogue_restores__+0x1c>

000007c2 <vfprintf>:
 7c2:	ab e0       	ldi	r26, 0x0B	; 11
 7c4:	b0 e0       	ldi	r27, 0x00	; 0
 7c6:	e7 ee       	ldi	r30, 0xE7	; 231
 7c8:	f3 e0       	ldi	r31, 0x03	; 3
 7ca:	0c 94 72 06 	jmp	0xce4	; 0xce4 <__prologue_saves__>
 7ce:	6c 01       	movw	r12, r24
 7d0:	7b 01       	movw	r14, r22
 7d2:	8a 01       	movw	r16, r20
 7d4:	fc 01       	movw	r30, r24
 7d6:	17 82       	std	Z+7, r1	; 0x07
 7d8:	16 82       	std	Z+6, r1	; 0x06
 7da:	83 81       	ldd	r24, Z+3	; 0x03
 7dc:	81 ff       	sbrs	r24, 1
 7de:	cc c1       	rjmp	.+920    	; 0xb78 <__stack+0x279>
 7e0:	ce 01       	movw	r24, r28
 7e2:	01 96       	adiw	r24, 0x01	; 1
 7e4:	3c 01       	movw	r6, r24
 7e6:	f6 01       	movw	r30, r12
 7e8:	93 81       	ldd	r25, Z+3	; 0x03
 7ea:	f7 01       	movw	r30, r14
 7ec:	93 fd       	sbrc	r25, 3
 7ee:	85 91       	lpm	r24, Z+
 7f0:	93 ff       	sbrs	r25, 3
 7f2:	81 91       	ld	r24, Z+
 7f4:	7f 01       	movw	r14, r30
 7f6:	88 23       	and	r24, r24
 7f8:	09 f4       	brne	.+2      	; 0x7fc <vfprintf+0x3a>
 7fa:	ba c1       	rjmp	.+884    	; 0xb70 <__stack+0x271>
 7fc:	85 32       	cpi	r24, 0x25	; 37
 7fe:	39 f4       	brne	.+14     	; 0x80e <vfprintf+0x4c>
 800:	93 fd       	sbrc	r25, 3
 802:	85 91       	lpm	r24, Z+
 804:	93 ff       	sbrs	r25, 3
 806:	81 91       	ld	r24, Z+
 808:	7f 01       	movw	r14, r30
 80a:	85 32       	cpi	r24, 0x25	; 37
 80c:	29 f4       	brne	.+10     	; 0x818 <vfprintf+0x56>
 80e:	b6 01       	movw	r22, r12
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <fputc>
 816:	e7 cf       	rjmp	.-50     	; 0x7e6 <vfprintf+0x24>
 818:	91 2c       	mov	r9, r1
 81a:	21 2c       	mov	r2, r1
 81c:	31 2c       	mov	r3, r1
 81e:	ff e1       	ldi	r31, 0x1F	; 31
 820:	f3 15       	cp	r31, r3
 822:	d8 f0       	brcs	.+54     	; 0x85a <vfprintf+0x98>
 824:	8b 32       	cpi	r24, 0x2B	; 43
 826:	79 f0       	breq	.+30     	; 0x846 <vfprintf+0x84>
 828:	38 f4       	brcc	.+14     	; 0x838 <vfprintf+0x76>
 82a:	80 32       	cpi	r24, 0x20	; 32
 82c:	79 f0       	breq	.+30     	; 0x84c <vfprintf+0x8a>
 82e:	83 32       	cpi	r24, 0x23	; 35
 830:	a1 f4       	brne	.+40     	; 0x85a <vfprintf+0x98>
 832:	23 2d       	mov	r18, r3
 834:	20 61       	ori	r18, 0x10	; 16
 836:	1d c0       	rjmp	.+58     	; 0x872 <vfprintf+0xb0>
 838:	8d 32       	cpi	r24, 0x2D	; 45
 83a:	61 f0       	breq	.+24     	; 0x854 <vfprintf+0x92>
 83c:	80 33       	cpi	r24, 0x30	; 48
 83e:	69 f4       	brne	.+26     	; 0x85a <vfprintf+0x98>
 840:	23 2d       	mov	r18, r3
 842:	21 60       	ori	r18, 0x01	; 1
 844:	16 c0       	rjmp	.+44     	; 0x872 <vfprintf+0xb0>
 846:	83 2d       	mov	r24, r3
 848:	82 60       	ori	r24, 0x02	; 2
 84a:	38 2e       	mov	r3, r24
 84c:	e3 2d       	mov	r30, r3
 84e:	e4 60       	ori	r30, 0x04	; 4
 850:	3e 2e       	mov	r3, r30
 852:	2a c0       	rjmp	.+84     	; 0x8a8 <vfprintf+0xe6>
 854:	f3 2d       	mov	r31, r3
 856:	f8 60       	ori	r31, 0x08	; 8
 858:	1d c0       	rjmp	.+58     	; 0x894 <vfprintf+0xd2>
 85a:	37 fc       	sbrc	r3, 7
 85c:	2d c0       	rjmp	.+90     	; 0x8b8 <vfprintf+0xf6>
 85e:	20 ed       	ldi	r18, 0xD0	; 208
 860:	28 0f       	add	r18, r24
 862:	2a 30       	cpi	r18, 0x0A	; 10
 864:	40 f0       	brcs	.+16     	; 0x876 <vfprintf+0xb4>
 866:	8e 32       	cpi	r24, 0x2E	; 46
 868:	b9 f4       	brne	.+46     	; 0x898 <vfprintf+0xd6>
 86a:	36 fc       	sbrc	r3, 6
 86c:	81 c1       	rjmp	.+770    	; 0xb70 <__stack+0x271>
 86e:	23 2d       	mov	r18, r3
 870:	20 64       	ori	r18, 0x40	; 64
 872:	32 2e       	mov	r3, r18
 874:	19 c0       	rjmp	.+50     	; 0x8a8 <vfprintf+0xe6>
 876:	36 fe       	sbrs	r3, 6
 878:	06 c0       	rjmp	.+12     	; 0x886 <vfprintf+0xc4>
 87a:	8a e0       	ldi	r24, 0x0A	; 10
 87c:	98 9e       	mul	r9, r24
 87e:	20 0d       	add	r18, r0
 880:	11 24       	eor	r1, r1
 882:	92 2e       	mov	r9, r18
 884:	11 c0       	rjmp	.+34     	; 0x8a8 <vfprintf+0xe6>
 886:	ea e0       	ldi	r30, 0x0A	; 10
 888:	2e 9e       	mul	r2, r30
 88a:	20 0d       	add	r18, r0
 88c:	11 24       	eor	r1, r1
 88e:	22 2e       	mov	r2, r18
 890:	f3 2d       	mov	r31, r3
 892:	f0 62       	ori	r31, 0x20	; 32
 894:	3f 2e       	mov	r3, r31
 896:	08 c0       	rjmp	.+16     	; 0x8a8 <vfprintf+0xe6>
 898:	8c 36       	cpi	r24, 0x6C	; 108
 89a:	21 f4       	brne	.+8      	; 0x8a4 <vfprintf+0xe2>
 89c:	83 2d       	mov	r24, r3
 89e:	80 68       	ori	r24, 0x80	; 128
 8a0:	38 2e       	mov	r3, r24
 8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <vfprintf+0xe6>
 8a4:	88 36       	cpi	r24, 0x68	; 104
 8a6:	41 f4       	brne	.+16     	; 0x8b8 <vfprintf+0xf6>
 8a8:	f7 01       	movw	r30, r14
 8aa:	93 fd       	sbrc	r25, 3
 8ac:	85 91       	lpm	r24, Z+
 8ae:	93 ff       	sbrs	r25, 3
 8b0:	81 91       	ld	r24, Z+
 8b2:	7f 01       	movw	r14, r30
 8b4:	81 11       	cpse	r24, r1
 8b6:	b3 cf       	rjmp	.-154    	; 0x81e <vfprintf+0x5c>
 8b8:	98 2f       	mov	r25, r24
 8ba:	9f 7d       	andi	r25, 0xDF	; 223
 8bc:	95 54       	subi	r25, 0x45	; 69
 8be:	93 30       	cpi	r25, 0x03	; 3
 8c0:	28 f4       	brcc	.+10     	; 0x8cc <vfprintf+0x10a>
 8c2:	0c 5f       	subi	r16, 0xFC	; 252
 8c4:	1f 4f       	sbci	r17, 0xFF	; 255
 8c6:	9f e3       	ldi	r25, 0x3F	; 63
 8c8:	99 83       	std	Y+1, r25	; 0x01
 8ca:	0d c0       	rjmp	.+26     	; 0x8e6 <vfprintf+0x124>
 8cc:	83 36       	cpi	r24, 0x63	; 99
 8ce:	31 f0       	breq	.+12     	; 0x8dc <vfprintf+0x11a>
 8d0:	83 37       	cpi	r24, 0x73	; 115
 8d2:	71 f0       	breq	.+28     	; 0x8f0 <vfprintf+0x12e>
 8d4:	83 35       	cpi	r24, 0x53	; 83
 8d6:	09 f0       	breq	.+2      	; 0x8da <vfprintf+0x118>
 8d8:	59 c0       	rjmp	.+178    	; 0x98c <__stack+0x8d>
 8da:	21 c0       	rjmp	.+66     	; 0x91e <__stack+0x1f>
 8dc:	f8 01       	movw	r30, r16
 8de:	80 81       	ld	r24, Z
 8e0:	89 83       	std	Y+1, r24	; 0x01
 8e2:	0e 5f       	subi	r16, 0xFE	; 254
 8e4:	1f 4f       	sbci	r17, 0xFF	; 255
 8e6:	88 24       	eor	r8, r8
 8e8:	83 94       	inc	r8
 8ea:	91 2c       	mov	r9, r1
 8ec:	53 01       	movw	r10, r6
 8ee:	13 c0       	rjmp	.+38     	; 0x916 <__stack+0x17>
 8f0:	28 01       	movw	r4, r16
 8f2:	f2 e0       	ldi	r31, 0x02	; 2
 8f4:	4f 0e       	add	r4, r31
 8f6:	51 1c       	adc	r5, r1
 8f8:	f8 01       	movw	r30, r16
 8fa:	a0 80       	ld	r10, Z
 8fc:	b1 80       	ldd	r11, Z+1	; 0x01
 8fe:	36 fe       	sbrs	r3, 6
 900:	03 c0       	rjmp	.+6      	; 0x908 <__stack+0x9>
 902:	69 2d       	mov	r22, r9
 904:	70 e0       	ldi	r23, 0x00	; 0
 906:	02 c0       	rjmp	.+4      	; 0x90c <__stack+0xd>
 908:	6f ef       	ldi	r22, 0xFF	; 255
 90a:	7f ef       	ldi	r23, 0xFF	; 255
 90c:	c5 01       	movw	r24, r10
 90e:	0e 94 cd 05 	call	0xb9a	; 0xb9a <strnlen>
 912:	4c 01       	movw	r8, r24
 914:	82 01       	movw	r16, r4
 916:	f3 2d       	mov	r31, r3
 918:	ff 77       	andi	r31, 0x7F	; 127
 91a:	3f 2e       	mov	r3, r31
 91c:	16 c0       	rjmp	.+44     	; 0x94a <__stack+0x4b>
 91e:	28 01       	movw	r4, r16
 920:	22 e0       	ldi	r18, 0x02	; 2
 922:	42 0e       	add	r4, r18
 924:	51 1c       	adc	r5, r1
 926:	f8 01       	movw	r30, r16
 928:	a0 80       	ld	r10, Z
 92a:	b1 80       	ldd	r11, Z+1	; 0x01
 92c:	36 fe       	sbrs	r3, 6
 92e:	03 c0       	rjmp	.+6      	; 0x936 <__stack+0x37>
 930:	69 2d       	mov	r22, r9
 932:	70 e0       	ldi	r23, 0x00	; 0
 934:	02 c0       	rjmp	.+4      	; 0x93a <__stack+0x3b>
 936:	6f ef       	ldi	r22, 0xFF	; 255
 938:	7f ef       	ldi	r23, 0xFF	; 255
 93a:	c5 01       	movw	r24, r10
 93c:	0e 94 c2 05 	call	0xb84	; 0xb84 <strnlen_P>
 940:	4c 01       	movw	r8, r24
 942:	f3 2d       	mov	r31, r3
 944:	f0 68       	ori	r31, 0x80	; 128
 946:	3f 2e       	mov	r3, r31
 948:	82 01       	movw	r16, r4
 94a:	33 fc       	sbrc	r3, 3
 94c:	1b c0       	rjmp	.+54     	; 0x984 <__stack+0x85>
 94e:	82 2d       	mov	r24, r2
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	88 16       	cp	r8, r24
 954:	99 06       	cpc	r9, r25
 956:	b0 f4       	brcc	.+44     	; 0x984 <__stack+0x85>
 958:	b6 01       	movw	r22, r12
 95a:	80 e2       	ldi	r24, 0x20	; 32
 95c:	90 e0       	ldi	r25, 0x00	; 0
 95e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <fputc>
 962:	2a 94       	dec	r2
 964:	f4 cf       	rjmp	.-24     	; 0x94e <__stack+0x4f>
 966:	f5 01       	movw	r30, r10
 968:	37 fc       	sbrc	r3, 7
 96a:	85 91       	lpm	r24, Z+
 96c:	37 fe       	sbrs	r3, 7
 96e:	81 91       	ld	r24, Z+
 970:	5f 01       	movw	r10, r30
 972:	b6 01       	movw	r22, r12
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <fputc>
 97a:	21 10       	cpse	r2, r1
 97c:	2a 94       	dec	r2
 97e:	21 e0       	ldi	r18, 0x01	; 1
 980:	82 1a       	sub	r8, r18
 982:	91 08       	sbc	r9, r1
 984:	81 14       	cp	r8, r1
 986:	91 04       	cpc	r9, r1
 988:	71 f7       	brne	.-36     	; 0x966 <__stack+0x67>
 98a:	e8 c0       	rjmp	.+464    	; 0xb5c <__stack+0x25d>
 98c:	84 36       	cpi	r24, 0x64	; 100
 98e:	11 f0       	breq	.+4      	; 0x994 <__stack+0x95>
 990:	89 36       	cpi	r24, 0x69	; 105
 992:	41 f5       	brne	.+80     	; 0x9e4 <__stack+0xe5>
 994:	f8 01       	movw	r30, r16
 996:	37 fe       	sbrs	r3, 7
 998:	07 c0       	rjmp	.+14     	; 0x9a8 <__stack+0xa9>
 99a:	60 81       	ld	r22, Z
 99c:	71 81       	ldd	r23, Z+1	; 0x01
 99e:	82 81       	ldd	r24, Z+2	; 0x02
 9a0:	93 81       	ldd	r25, Z+3	; 0x03
 9a2:	0c 5f       	subi	r16, 0xFC	; 252
 9a4:	1f 4f       	sbci	r17, 0xFF	; 255
 9a6:	08 c0       	rjmp	.+16     	; 0x9b8 <__stack+0xb9>
 9a8:	60 81       	ld	r22, Z
 9aa:	71 81       	ldd	r23, Z+1	; 0x01
 9ac:	07 2e       	mov	r0, r23
 9ae:	00 0c       	add	r0, r0
 9b0:	88 0b       	sbc	r24, r24
 9b2:	99 0b       	sbc	r25, r25
 9b4:	0e 5f       	subi	r16, 0xFE	; 254
 9b6:	1f 4f       	sbci	r17, 0xFF	; 255
 9b8:	f3 2d       	mov	r31, r3
 9ba:	ff 76       	andi	r31, 0x6F	; 111
 9bc:	3f 2e       	mov	r3, r31
 9be:	97 ff       	sbrs	r25, 7
 9c0:	09 c0       	rjmp	.+18     	; 0x9d4 <__stack+0xd5>
 9c2:	90 95       	com	r25
 9c4:	80 95       	com	r24
 9c6:	70 95       	com	r23
 9c8:	61 95       	neg	r22
 9ca:	7f 4f       	sbci	r23, 0xFF	; 255
 9cc:	8f 4f       	sbci	r24, 0xFF	; 255
 9ce:	9f 4f       	sbci	r25, 0xFF	; 255
 9d0:	f0 68       	ori	r31, 0x80	; 128
 9d2:	3f 2e       	mov	r3, r31
 9d4:	2a e0       	ldi	r18, 0x0A	; 10
 9d6:	30 e0       	ldi	r19, 0x00	; 0
 9d8:	a3 01       	movw	r20, r6
 9da:	0e 94 14 06 	call	0xc28	; 0xc28 <__ultoa_invert>
 9de:	88 2e       	mov	r8, r24
 9e0:	86 18       	sub	r8, r6
 9e2:	45 c0       	rjmp	.+138    	; 0xa6e <__stack+0x16f>
 9e4:	85 37       	cpi	r24, 0x75	; 117
 9e6:	31 f4       	brne	.+12     	; 0x9f4 <__stack+0xf5>
 9e8:	23 2d       	mov	r18, r3
 9ea:	2f 7e       	andi	r18, 0xEF	; 239
 9ec:	b2 2e       	mov	r11, r18
 9ee:	2a e0       	ldi	r18, 0x0A	; 10
 9f0:	30 e0       	ldi	r19, 0x00	; 0
 9f2:	25 c0       	rjmp	.+74     	; 0xa3e <__stack+0x13f>
 9f4:	93 2d       	mov	r25, r3
 9f6:	99 7f       	andi	r25, 0xF9	; 249
 9f8:	b9 2e       	mov	r11, r25
 9fa:	8f 36       	cpi	r24, 0x6F	; 111
 9fc:	c1 f0       	breq	.+48     	; 0xa2e <__stack+0x12f>
 9fe:	18 f4       	brcc	.+6      	; 0xa06 <__stack+0x107>
 a00:	88 35       	cpi	r24, 0x58	; 88
 a02:	79 f0       	breq	.+30     	; 0xa22 <__stack+0x123>
 a04:	b5 c0       	rjmp	.+362    	; 0xb70 <__stack+0x271>
 a06:	80 37       	cpi	r24, 0x70	; 112
 a08:	19 f0       	breq	.+6      	; 0xa10 <__stack+0x111>
 a0a:	88 37       	cpi	r24, 0x78	; 120
 a0c:	21 f0       	breq	.+8      	; 0xa16 <__stack+0x117>
 a0e:	b0 c0       	rjmp	.+352    	; 0xb70 <__stack+0x271>
 a10:	e9 2f       	mov	r30, r25
 a12:	e0 61       	ori	r30, 0x10	; 16
 a14:	be 2e       	mov	r11, r30
 a16:	b4 fe       	sbrs	r11, 4
 a18:	0d c0       	rjmp	.+26     	; 0xa34 <__stack+0x135>
 a1a:	fb 2d       	mov	r31, r11
 a1c:	f4 60       	ori	r31, 0x04	; 4
 a1e:	bf 2e       	mov	r11, r31
 a20:	09 c0       	rjmp	.+18     	; 0xa34 <__stack+0x135>
 a22:	34 fe       	sbrs	r3, 4
 a24:	0a c0       	rjmp	.+20     	; 0xa3a <__stack+0x13b>
 a26:	29 2f       	mov	r18, r25
 a28:	26 60       	ori	r18, 0x06	; 6
 a2a:	b2 2e       	mov	r11, r18
 a2c:	06 c0       	rjmp	.+12     	; 0xa3a <__stack+0x13b>
 a2e:	28 e0       	ldi	r18, 0x08	; 8
 a30:	30 e0       	ldi	r19, 0x00	; 0
 a32:	05 c0       	rjmp	.+10     	; 0xa3e <__stack+0x13f>
 a34:	20 e1       	ldi	r18, 0x10	; 16
 a36:	30 e0       	ldi	r19, 0x00	; 0
 a38:	02 c0       	rjmp	.+4      	; 0xa3e <__stack+0x13f>
 a3a:	20 e1       	ldi	r18, 0x10	; 16
 a3c:	32 e0       	ldi	r19, 0x02	; 2
 a3e:	f8 01       	movw	r30, r16
 a40:	b7 fe       	sbrs	r11, 7
 a42:	07 c0       	rjmp	.+14     	; 0xa52 <__stack+0x153>
 a44:	60 81       	ld	r22, Z
 a46:	71 81       	ldd	r23, Z+1	; 0x01
 a48:	82 81       	ldd	r24, Z+2	; 0x02
 a4a:	93 81       	ldd	r25, Z+3	; 0x03
 a4c:	0c 5f       	subi	r16, 0xFC	; 252
 a4e:	1f 4f       	sbci	r17, 0xFF	; 255
 a50:	06 c0       	rjmp	.+12     	; 0xa5e <__stack+0x15f>
 a52:	60 81       	ld	r22, Z
 a54:	71 81       	ldd	r23, Z+1	; 0x01
 a56:	80 e0       	ldi	r24, 0x00	; 0
 a58:	90 e0       	ldi	r25, 0x00	; 0
 a5a:	0e 5f       	subi	r16, 0xFE	; 254
 a5c:	1f 4f       	sbci	r17, 0xFF	; 255
 a5e:	a3 01       	movw	r20, r6
 a60:	0e 94 14 06 	call	0xc28	; 0xc28 <__ultoa_invert>
 a64:	88 2e       	mov	r8, r24
 a66:	86 18       	sub	r8, r6
 a68:	fb 2d       	mov	r31, r11
 a6a:	ff 77       	andi	r31, 0x7F	; 127
 a6c:	3f 2e       	mov	r3, r31
 a6e:	36 fe       	sbrs	r3, 6
 a70:	0d c0       	rjmp	.+26     	; 0xa8c <__stack+0x18d>
 a72:	23 2d       	mov	r18, r3
 a74:	2e 7f       	andi	r18, 0xFE	; 254
 a76:	a2 2e       	mov	r10, r18
 a78:	89 14       	cp	r8, r9
 a7a:	58 f4       	brcc	.+22     	; 0xa92 <__stack+0x193>
 a7c:	34 fe       	sbrs	r3, 4
 a7e:	0b c0       	rjmp	.+22     	; 0xa96 <__stack+0x197>
 a80:	32 fc       	sbrc	r3, 2
 a82:	09 c0       	rjmp	.+18     	; 0xa96 <__stack+0x197>
 a84:	83 2d       	mov	r24, r3
 a86:	8e 7e       	andi	r24, 0xEE	; 238
 a88:	a8 2e       	mov	r10, r24
 a8a:	05 c0       	rjmp	.+10     	; 0xa96 <__stack+0x197>
 a8c:	b8 2c       	mov	r11, r8
 a8e:	a3 2c       	mov	r10, r3
 a90:	03 c0       	rjmp	.+6      	; 0xa98 <__stack+0x199>
 a92:	b8 2c       	mov	r11, r8
 a94:	01 c0       	rjmp	.+2      	; 0xa98 <__stack+0x199>
 a96:	b9 2c       	mov	r11, r9
 a98:	a4 fe       	sbrs	r10, 4
 a9a:	0f c0       	rjmp	.+30     	; 0xaba <__stack+0x1bb>
 a9c:	fe 01       	movw	r30, r28
 a9e:	e8 0d       	add	r30, r8
 aa0:	f1 1d       	adc	r31, r1
 aa2:	80 81       	ld	r24, Z
 aa4:	80 33       	cpi	r24, 0x30	; 48
 aa6:	21 f4       	brne	.+8      	; 0xab0 <__stack+0x1b1>
 aa8:	9a 2d       	mov	r25, r10
 aaa:	99 7e       	andi	r25, 0xE9	; 233
 aac:	a9 2e       	mov	r10, r25
 aae:	09 c0       	rjmp	.+18     	; 0xac2 <__stack+0x1c3>
 ab0:	a2 fe       	sbrs	r10, 2
 ab2:	06 c0       	rjmp	.+12     	; 0xac0 <__stack+0x1c1>
 ab4:	b3 94       	inc	r11
 ab6:	b3 94       	inc	r11
 ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__stack+0x1c3>
 aba:	8a 2d       	mov	r24, r10
 abc:	86 78       	andi	r24, 0x86	; 134
 abe:	09 f0       	breq	.+2      	; 0xac2 <__stack+0x1c3>
 ac0:	b3 94       	inc	r11
 ac2:	a3 fc       	sbrc	r10, 3
 ac4:	11 c0       	rjmp	.+34     	; 0xae8 <__stack+0x1e9>
 ac6:	a0 fe       	sbrs	r10, 0
 ac8:	06 c0       	rjmp	.+12     	; 0xad6 <__stack+0x1d7>
 aca:	b2 14       	cp	r11, r2
 acc:	88 f4       	brcc	.+34     	; 0xaf0 <__stack+0x1f1>
 ace:	28 0c       	add	r2, r8
 ad0:	92 2c       	mov	r9, r2
 ad2:	9b 18       	sub	r9, r11
 ad4:	0e c0       	rjmp	.+28     	; 0xaf2 <__stack+0x1f3>
 ad6:	b2 14       	cp	r11, r2
 ad8:	60 f4       	brcc	.+24     	; 0xaf2 <__stack+0x1f3>
 ada:	b6 01       	movw	r22, r12
 adc:	80 e2       	ldi	r24, 0x20	; 32
 ade:	90 e0       	ldi	r25, 0x00	; 0
 ae0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <fputc>
 ae4:	b3 94       	inc	r11
 ae6:	f7 cf       	rjmp	.-18     	; 0xad6 <__stack+0x1d7>
 ae8:	b2 14       	cp	r11, r2
 aea:	18 f4       	brcc	.+6      	; 0xaf2 <__stack+0x1f3>
 aec:	2b 18       	sub	r2, r11
 aee:	02 c0       	rjmp	.+4      	; 0xaf4 <__stack+0x1f5>
 af0:	98 2c       	mov	r9, r8
 af2:	21 2c       	mov	r2, r1
 af4:	a4 fe       	sbrs	r10, 4
 af6:	10 c0       	rjmp	.+32     	; 0xb18 <__stack+0x219>
 af8:	b6 01       	movw	r22, r12
 afa:	80 e3       	ldi	r24, 0x30	; 48
 afc:	90 e0       	ldi	r25, 0x00	; 0
 afe:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <fputc>
 b02:	a2 fe       	sbrs	r10, 2
 b04:	17 c0       	rjmp	.+46     	; 0xb34 <__stack+0x235>
 b06:	a1 fc       	sbrc	r10, 1
 b08:	03 c0       	rjmp	.+6      	; 0xb10 <__stack+0x211>
 b0a:	88 e7       	ldi	r24, 0x78	; 120
 b0c:	90 e0       	ldi	r25, 0x00	; 0
 b0e:	02 c0       	rjmp	.+4      	; 0xb14 <__stack+0x215>
 b10:	88 e5       	ldi	r24, 0x58	; 88
 b12:	90 e0       	ldi	r25, 0x00	; 0
 b14:	b6 01       	movw	r22, r12
 b16:	0c c0       	rjmp	.+24     	; 0xb30 <__stack+0x231>
 b18:	8a 2d       	mov	r24, r10
 b1a:	86 78       	andi	r24, 0x86	; 134
 b1c:	59 f0       	breq	.+22     	; 0xb34 <__stack+0x235>
 b1e:	a1 fe       	sbrs	r10, 1
 b20:	02 c0       	rjmp	.+4      	; 0xb26 <__stack+0x227>
 b22:	8b e2       	ldi	r24, 0x2B	; 43
 b24:	01 c0       	rjmp	.+2      	; 0xb28 <__stack+0x229>
 b26:	80 e2       	ldi	r24, 0x20	; 32
 b28:	a7 fc       	sbrc	r10, 7
 b2a:	8d e2       	ldi	r24, 0x2D	; 45
 b2c:	b6 01       	movw	r22, r12
 b2e:	90 e0       	ldi	r25, 0x00	; 0
 b30:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <fputc>
 b34:	89 14       	cp	r8, r9
 b36:	38 f4       	brcc	.+14     	; 0xb46 <__stack+0x247>
 b38:	b6 01       	movw	r22, r12
 b3a:	80 e3       	ldi	r24, 0x30	; 48
 b3c:	90 e0       	ldi	r25, 0x00	; 0
 b3e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <fputc>
 b42:	9a 94       	dec	r9
 b44:	f7 cf       	rjmp	.-18     	; 0xb34 <__stack+0x235>
 b46:	8a 94       	dec	r8
 b48:	f3 01       	movw	r30, r6
 b4a:	e8 0d       	add	r30, r8
 b4c:	f1 1d       	adc	r31, r1
 b4e:	80 81       	ld	r24, Z
 b50:	b6 01       	movw	r22, r12
 b52:	90 e0       	ldi	r25, 0x00	; 0
 b54:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <fputc>
 b58:	81 10       	cpse	r8, r1
 b5a:	f5 cf       	rjmp	.-22     	; 0xb46 <__stack+0x247>
 b5c:	22 20       	and	r2, r2
 b5e:	09 f4       	brne	.+2      	; 0xb62 <__stack+0x263>
 b60:	42 ce       	rjmp	.-892    	; 0x7e6 <vfprintf+0x24>
 b62:	b6 01       	movw	r22, r12
 b64:	80 e2       	ldi	r24, 0x20	; 32
 b66:	90 e0       	ldi	r25, 0x00	; 0
 b68:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <fputc>
 b6c:	2a 94       	dec	r2
 b6e:	f6 cf       	rjmp	.-20     	; 0xb5c <__stack+0x25d>
 b70:	f6 01       	movw	r30, r12
 b72:	86 81       	ldd	r24, Z+6	; 0x06
 b74:	97 81       	ldd	r25, Z+7	; 0x07
 b76:	02 c0       	rjmp	.+4      	; 0xb7c <__stack+0x27d>
 b78:	8f ef       	ldi	r24, 0xFF	; 255
 b7a:	9f ef       	ldi	r25, 0xFF	; 255
 b7c:	2b 96       	adiw	r28, 0x0b	; 11
 b7e:	e2 e1       	ldi	r30, 0x12	; 18
 b80:	0c 94 8e 06 	jmp	0xd1c	; 0xd1c <__epilogue_restores__>

00000b84 <strnlen_P>:
 b84:	fc 01       	movw	r30, r24
 b86:	05 90       	lpm	r0, Z+
 b88:	61 50       	subi	r22, 0x01	; 1
 b8a:	70 40       	sbci	r23, 0x00	; 0
 b8c:	01 10       	cpse	r0, r1
 b8e:	d8 f7       	brcc	.-10     	; 0xb86 <strnlen_P+0x2>
 b90:	80 95       	com	r24
 b92:	90 95       	com	r25
 b94:	8e 0f       	add	r24, r30
 b96:	9f 1f       	adc	r25, r31
 b98:	08 95       	ret

00000b9a <strnlen>:
 b9a:	fc 01       	movw	r30, r24
 b9c:	61 50       	subi	r22, 0x01	; 1
 b9e:	70 40       	sbci	r23, 0x00	; 0
 ba0:	01 90       	ld	r0, Z+
 ba2:	01 10       	cpse	r0, r1
 ba4:	d8 f7       	brcc	.-10     	; 0xb9c <strnlen+0x2>
 ba6:	80 95       	com	r24
 ba8:	90 95       	com	r25
 baa:	8e 0f       	add	r24, r30
 bac:	9f 1f       	adc	r25, r31
 bae:	08 95       	ret

00000bb0 <fputc>:
 bb0:	0f 93       	push	r16
 bb2:	1f 93       	push	r17
 bb4:	cf 93       	push	r28
 bb6:	df 93       	push	r29
 bb8:	fb 01       	movw	r30, r22
 bba:	23 81       	ldd	r18, Z+3	; 0x03
 bbc:	21 fd       	sbrc	r18, 1
 bbe:	03 c0       	rjmp	.+6      	; 0xbc6 <fputc+0x16>
 bc0:	8f ef       	ldi	r24, 0xFF	; 255
 bc2:	9f ef       	ldi	r25, 0xFF	; 255
 bc4:	2c c0       	rjmp	.+88     	; 0xc1e <fputc+0x6e>
 bc6:	22 ff       	sbrs	r18, 2
 bc8:	16 c0       	rjmp	.+44     	; 0xbf6 <fputc+0x46>
 bca:	46 81       	ldd	r20, Z+6	; 0x06
 bcc:	57 81       	ldd	r21, Z+7	; 0x07
 bce:	24 81       	ldd	r18, Z+4	; 0x04
 bd0:	35 81       	ldd	r19, Z+5	; 0x05
 bd2:	42 17       	cp	r20, r18
 bd4:	53 07       	cpc	r21, r19
 bd6:	44 f4       	brge	.+16     	; 0xbe8 <fputc+0x38>
 bd8:	a0 81       	ld	r26, Z
 bda:	b1 81       	ldd	r27, Z+1	; 0x01
 bdc:	9d 01       	movw	r18, r26
 bde:	2f 5f       	subi	r18, 0xFF	; 255
 be0:	3f 4f       	sbci	r19, 0xFF	; 255
 be2:	31 83       	std	Z+1, r19	; 0x01
 be4:	20 83       	st	Z, r18
 be6:	8c 93       	st	X, r24
 be8:	26 81       	ldd	r18, Z+6	; 0x06
 bea:	37 81       	ldd	r19, Z+7	; 0x07
 bec:	2f 5f       	subi	r18, 0xFF	; 255
 bee:	3f 4f       	sbci	r19, 0xFF	; 255
 bf0:	37 83       	std	Z+7, r19	; 0x07
 bf2:	26 83       	std	Z+6, r18	; 0x06
 bf4:	14 c0       	rjmp	.+40     	; 0xc1e <fputc+0x6e>
 bf6:	8b 01       	movw	r16, r22
 bf8:	ec 01       	movw	r28, r24
 bfa:	fb 01       	movw	r30, r22
 bfc:	00 84       	ldd	r0, Z+8	; 0x08
 bfe:	f1 85       	ldd	r31, Z+9	; 0x09
 c00:	e0 2d       	mov	r30, r0
 c02:	09 95       	icall
 c04:	89 2b       	or	r24, r25
 c06:	e1 f6       	brne	.-72     	; 0xbc0 <fputc+0x10>
 c08:	d8 01       	movw	r26, r16
 c0a:	16 96       	adiw	r26, 0x06	; 6
 c0c:	8d 91       	ld	r24, X+
 c0e:	9c 91       	ld	r25, X
 c10:	17 97       	sbiw	r26, 0x07	; 7
 c12:	01 96       	adiw	r24, 0x01	; 1
 c14:	17 96       	adiw	r26, 0x07	; 7
 c16:	9c 93       	st	X, r25
 c18:	8e 93       	st	-X, r24
 c1a:	16 97       	sbiw	r26, 0x06	; 6
 c1c:	ce 01       	movw	r24, r28
 c1e:	df 91       	pop	r29
 c20:	cf 91       	pop	r28
 c22:	1f 91       	pop	r17
 c24:	0f 91       	pop	r16
 c26:	08 95       	ret

00000c28 <__ultoa_invert>:
 c28:	fa 01       	movw	r30, r20
 c2a:	aa 27       	eor	r26, r26
 c2c:	28 30       	cpi	r18, 0x08	; 8
 c2e:	51 f1       	breq	.+84     	; 0xc84 <__ultoa_invert+0x5c>
 c30:	20 31       	cpi	r18, 0x10	; 16
 c32:	81 f1       	breq	.+96     	; 0xc94 <__ultoa_invert+0x6c>
 c34:	e8 94       	clt
 c36:	6f 93       	push	r22
 c38:	6e 7f       	andi	r22, 0xFE	; 254
 c3a:	6e 5f       	subi	r22, 0xFE	; 254
 c3c:	7f 4f       	sbci	r23, 0xFF	; 255
 c3e:	8f 4f       	sbci	r24, 0xFF	; 255
 c40:	9f 4f       	sbci	r25, 0xFF	; 255
 c42:	af 4f       	sbci	r26, 0xFF	; 255
 c44:	b1 e0       	ldi	r27, 0x01	; 1
 c46:	3e d0       	rcall	.+124    	; 0xcc4 <__ultoa_invert+0x9c>
 c48:	b4 e0       	ldi	r27, 0x04	; 4
 c4a:	3c d0       	rcall	.+120    	; 0xcc4 <__ultoa_invert+0x9c>
 c4c:	67 0f       	add	r22, r23
 c4e:	78 1f       	adc	r23, r24
 c50:	89 1f       	adc	r24, r25
 c52:	9a 1f       	adc	r25, r26
 c54:	a1 1d       	adc	r26, r1
 c56:	68 0f       	add	r22, r24
 c58:	79 1f       	adc	r23, r25
 c5a:	8a 1f       	adc	r24, r26
 c5c:	91 1d       	adc	r25, r1
 c5e:	a1 1d       	adc	r26, r1
 c60:	6a 0f       	add	r22, r26
 c62:	71 1d       	adc	r23, r1
 c64:	81 1d       	adc	r24, r1
 c66:	91 1d       	adc	r25, r1
 c68:	a1 1d       	adc	r26, r1
 c6a:	20 d0       	rcall	.+64     	; 0xcac <__ultoa_invert+0x84>
 c6c:	09 f4       	brne	.+2      	; 0xc70 <__ultoa_invert+0x48>
 c6e:	68 94       	set
 c70:	3f 91       	pop	r19
 c72:	2a e0       	ldi	r18, 0x0A	; 10
 c74:	26 9f       	mul	r18, r22
 c76:	11 24       	eor	r1, r1
 c78:	30 19       	sub	r19, r0
 c7a:	30 5d       	subi	r19, 0xD0	; 208
 c7c:	31 93       	st	Z+, r19
 c7e:	de f6       	brtc	.-74     	; 0xc36 <__ultoa_invert+0xe>
 c80:	cf 01       	movw	r24, r30
 c82:	08 95       	ret
 c84:	46 2f       	mov	r20, r22
 c86:	47 70       	andi	r20, 0x07	; 7
 c88:	40 5d       	subi	r20, 0xD0	; 208
 c8a:	41 93       	st	Z+, r20
 c8c:	b3 e0       	ldi	r27, 0x03	; 3
 c8e:	0f d0       	rcall	.+30     	; 0xcae <__ultoa_invert+0x86>
 c90:	c9 f7       	brne	.-14     	; 0xc84 <__ultoa_invert+0x5c>
 c92:	f6 cf       	rjmp	.-20     	; 0xc80 <__ultoa_invert+0x58>
 c94:	46 2f       	mov	r20, r22
 c96:	4f 70       	andi	r20, 0x0F	; 15
 c98:	40 5d       	subi	r20, 0xD0	; 208
 c9a:	4a 33       	cpi	r20, 0x3A	; 58
 c9c:	18 f0       	brcs	.+6      	; 0xca4 <__ultoa_invert+0x7c>
 c9e:	49 5d       	subi	r20, 0xD9	; 217
 ca0:	31 fd       	sbrc	r19, 1
 ca2:	40 52       	subi	r20, 0x20	; 32
 ca4:	41 93       	st	Z+, r20
 ca6:	02 d0       	rcall	.+4      	; 0xcac <__ultoa_invert+0x84>
 ca8:	a9 f7       	brne	.-22     	; 0xc94 <__ultoa_invert+0x6c>
 caa:	ea cf       	rjmp	.-44     	; 0xc80 <__ultoa_invert+0x58>
 cac:	b4 e0       	ldi	r27, 0x04	; 4
 cae:	a6 95       	lsr	r26
 cb0:	97 95       	ror	r25
 cb2:	87 95       	ror	r24
 cb4:	77 95       	ror	r23
 cb6:	67 95       	ror	r22
 cb8:	ba 95       	dec	r27
 cba:	c9 f7       	brne	.-14     	; 0xcae <__ultoa_invert+0x86>
 cbc:	00 97       	sbiw	r24, 0x00	; 0
 cbe:	61 05       	cpc	r22, r1
 cc0:	71 05       	cpc	r23, r1
 cc2:	08 95       	ret
 cc4:	9b 01       	movw	r18, r22
 cc6:	ac 01       	movw	r20, r24
 cc8:	0a 2e       	mov	r0, r26
 cca:	06 94       	lsr	r0
 ccc:	57 95       	ror	r21
 cce:	47 95       	ror	r20
 cd0:	37 95       	ror	r19
 cd2:	27 95       	ror	r18
 cd4:	ba 95       	dec	r27
 cd6:	c9 f7       	brne	.-14     	; 0xcca <__ultoa_invert+0xa2>
 cd8:	62 0f       	add	r22, r18
 cda:	73 1f       	adc	r23, r19
 cdc:	84 1f       	adc	r24, r20
 cde:	95 1f       	adc	r25, r21
 ce0:	a0 1d       	adc	r26, r0
 ce2:	08 95       	ret

00000ce4 <__prologue_saves__>:
 ce4:	2f 92       	push	r2
 ce6:	3f 92       	push	r3
 ce8:	4f 92       	push	r4
 cea:	5f 92       	push	r5
 cec:	6f 92       	push	r6
 cee:	7f 92       	push	r7
 cf0:	8f 92       	push	r8
 cf2:	9f 92       	push	r9
 cf4:	af 92       	push	r10
 cf6:	bf 92       	push	r11
 cf8:	cf 92       	push	r12
 cfa:	df 92       	push	r13
 cfc:	ef 92       	push	r14
 cfe:	ff 92       	push	r15
 d00:	0f 93       	push	r16
 d02:	1f 93       	push	r17
 d04:	cf 93       	push	r28
 d06:	df 93       	push	r29
 d08:	cd b7       	in	r28, 0x3d	; 61
 d0a:	de b7       	in	r29, 0x3e	; 62
 d0c:	ca 1b       	sub	r28, r26
 d0e:	db 0b       	sbc	r29, r27
 d10:	0f b6       	in	r0, 0x3f	; 63
 d12:	f8 94       	cli
 d14:	de bf       	out	0x3e, r29	; 62
 d16:	0f be       	out	0x3f, r0	; 63
 d18:	cd bf       	out	0x3d, r28	; 61
 d1a:	09 94       	ijmp

00000d1c <__epilogue_restores__>:
 d1c:	2a 88       	ldd	r2, Y+18	; 0x12
 d1e:	39 88       	ldd	r3, Y+17	; 0x11
 d20:	48 88       	ldd	r4, Y+16	; 0x10
 d22:	5f 84       	ldd	r5, Y+15	; 0x0f
 d24:	6e 84       	ldd	r6, Y+14	; 0x0e
 d26:	7d 84       	ldd	r7, Y+13	; 0x0d
 d28:	8c 84       	ldd	r8, Y+12	; 0x0c
 d2a:	9b 84       	ldd	r9, Y+11	; 0x0b
 d2c:	aa 84       	ldd	r10, Y+10	; 0x0a
 d2e:	b9 84       	ldd	r11, Y+9	; 0x09
 d30:	c8 84       	ldd	r12, Y+8	; 0x08
 d32:	df 80       	ldd	r13, Y+7	; 0x07
 d34:	ee 80       	ldd	r14, Y+6	; 0x06
 d36:	fd 80       	ldd	r15, Y+5	; 0x05
 d38:	0c 81       	ldd	r16, Y+4	; 0x04
 d3a:	1b 81       	ldd	r17, Y+3	; 0x03
 d3c:	aa 81       	ldd	r26, Y+2	; 0x02
 d3e:	b9 81       	ldd	r27, Y+1	; 0x01
 d40:	ce 0f       	add	r28, r30
 d42:	d1 1d       	adc	r29, r1
 d44:	0f b6       	in	r0, 0x3f	; 63
 d46:	f8 94       	cli
 d48:	de bf       	out	0x3e, r29	; 62
 d4a:	0f be       	out	0x3f, r0	; 63
 d4c:	cd bf       	out	0x3d, r28	; 61
 d4e:	ed 01       	movw	r28, r26
 d50:	08 95       	ret

00000d52 <_exit>:
 d52:	f8 94       	cli

00000d54 <__stop_program>:
 d54:	ff cf       	rjmp	.-2      	; 0xd54 <__stop_program>
