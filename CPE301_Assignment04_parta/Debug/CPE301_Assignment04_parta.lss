
CPE301_Assignment04_parta.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000c18  00000cac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  0080012a  0080012a  00000cd6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000cd6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000981  00000000  00000000  00000dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000078c  00000000  00000000  00001755  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000376  00000000  00000000  00001ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00002258  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b2  00000000  00000000  00002390  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ab  00000000  00000000  00002842  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002aed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e1       	ldi	r30, 0x18	; 24
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 32       	cpi	r26, 0x2A	; 42
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e2       	ldi	r26, 0x2A	; 42
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 33       	cpi	r26, 0x3A	; 58
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <main>
  9e:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <enable_external_interrupt>:
volatile uint16_t old_adc_value=0;
volatile uint16_t interrupt_counter=0; // used for debouncing puposes;

void enable_external_interrupt(void)
{
	PCICR = 1<<PCIE1;           // Enables PCMSK0 scan
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK1 = 1<<PCINT9;			// Triggers interrupt whenever pin 19 changes state
  ac:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
  b0:	08 95       	ret

000000b2 <adc_init>:
}

void adc_init(void)
{
	ADMUX = 0; // use ADC0
  b2:	ec e7       	ldi	r30, 0x7C	; 124
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0); // use AVcc as the reference. Input will be right justified
  b8:	80 81       	ld	r24, Z
  ba:	80 64       	ori	r24, 0x40	; 64
  bc:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // 128 pre-scale for 16Mhz
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	87 60       	ori	r24, 0x07	; 7
  c6:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN); // Enable the ADC
  c8:	80 81       	ld	r24, Z
  ca:	80 68       	ori	r24, 0x80	; 128
  cc:	80 83       	st	Z, r24
	
	ADCSRB = 0; // 0 for free running mode
  ce:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
  d2:	08 95       	ret

000000d4 <bounce_polling>:
void bounce_polling(void)
{
	unsigned long temp_interrupt_counter;
	do 
	{
		temp_interrupt_counter = interrupt_counter;
  d4:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <__data_end>
  d8:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <__data_end+0x1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	4f ef       	ldi	r20, 0xFF	; 255
  de:	89 e6       	ldi	r24, 0x69	; 105
  e0:	98 e1       	ldi	r25, 0x18	; 24
  e2:	41 50       	subi	r20, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <bounce_polling+0xe>
  ea:	00 c0       	rjmp	.+0      	; 0xec <bounce_polling+0x18>
  ec:	00 00       	nop
		_delay_ms(500);
	} while (temp_interrupt_counter !=interrupt_counter); // If still bouncing the interrupt_counter will change during the delay
  ee:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
  f2:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__data_end+0x1>
  f6:	28 17       	cp	r18, r24
  f8:	39 07       	cpc	r19, r25
  fa:	61 f7       	brne	.-40     	; 0xd4 <bounce_polling>
};
  fc:	08 95       	ret

000000fe <usart_init>:


#ifdef ISDEBUGGING
void usart_init()
{
	UBRR0H = (MYUBRR) >> 8;
  fe:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = MYUBRR;
 102:	87 e6       	ldi	r24, 0x67	; 103
 104:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0); // Enable receiver and transmitter
 108:	e1 ec       	ldi	r30, 0xC1	; 193
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	88 61       	ori	r24, 0x18	; 24
 110:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0); // Enable receiver interrupt
 112:	80 81       	ld	r24, Z
 114:	80 68       	ori	r24, 0x80	; 128
 116:	80 83       	st	Z, r24
	UCSR0C |=  (1 << UCSZ01) | (1 << UCSZ00); // Set frame: 8data, 1 stop
 118:	e2 ec       	ldi	r30, 0xC2	; 194
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	86 60       	ori	r24, 0x06	; 6
 120:	80 83       	st	Z, r24
 122:	08 95       	ret

00000124 <__vector_18>:
	
}

ISR (USART_RX_vect)
{
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	8f 93       	push	r24
 130:	ef 93       	push	r30
 132:	ff 93       	push	r31
	ReceivedChar = UDR0; // Read data from the RX buffer
 134:	e6 ec       	ldi	r30, 0xC6	; 198
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <ReceivedChar>
	
	UDR0 = ReceivedChar; // Write the data to the TX buffer
 13e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ReceivedChar>
 142:	80 83       	st	Z, r24
}
 144:	ff 91       	pop	r31
 146:	ef 91       	pop	r30
 148:	8f 91       	pop	r24
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <USART0SendByte>:

int USART0SendByte(char u8Data)
{
	//wait while previous byte is completed
	while(!(UCSR0A&(1<<UDRE0))){};
 154:	e0 ec       	ldi	r30, 0xC0	; 192
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	90 81       	ld	r25, Z
 15a:	95 ff       	sbrs	r25, 5
 15c:	fd cf       	rjmp	.-6      	; 0x158 <USART0SendByte+0x4>
	// Transmit data
	UDR0=u8Data;
 15e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 0;
}
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	08 95       	ret

00000168 <USARTSendStr>:

void USARTSendStr(char* _str)
{
 168:	ef 92       	push	r14
 16a:	ff 92       	push	r15
 16c:	0f 93       	push	r16
 16e:	1f 93       	push	r17
 170:	cf 93       	push	r28
			int thesize=strlen(_str);
 172:	fc 01       	movw	r30, r24
 174:	01 90       	ld	r0, Z+
 176:	00 20       	and	r0, r0
 178:	e9 f7       	brne	.-6      	; 0x174 <USARTSendStr+0xc>
 17a:	31 97       	sbiw	r30, 0x01	; 1
 17c:	8f 01       	movw	r16, r30
 17e:	08 1b       	sub	r16, r24
 180:	19 0b       	sbc	r17, r25
			for (uint8_t i=0; i<thesize;i++)
 182:	10 16       	cp	r1, r16
 184:	11 06       	cpc	r1, r17
 186:	74 f4       	brge	.+28     	; 0x1a4 <USARTSendStr+0x3c>
 188:	7c 01       	movw	r14, r24
 18a:	c0 e0       	ldi	r28, 0x00	; 0
			{
				USART0SendByte(_str[i]);
 18c:	f7 01       	movw	r30, r14
 18e:	ec 0f       	add	r30, r28
 190:	f1 1d       	adc	r31, r1
 192:	80 81       	ld	r24, Z
 194:	0e 94 aa 00 	call	0x154	; 0x154 <USART0SendByte>
}

void USARTSendStr(char* _str)
{
			int thesize=strlen(_str);
			for (uint8_t i=0; i<thesize;i++)
 198:	cf 5f       	subi	r28, 0xFF	; 255
 19a:	2c 2f       	mov	r18, r28
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	20 17       	cp	r18, r16
 1a0:	31 07       	cpc	r19, r17
 1a2:	a4 f3       	brlt	.-24     	; 0x18c <USARTSendStr+0x24>
			{
				USART0SendByte(_str[i]);
			}
}
 1a4:	cf 91       	pop	r28
 1a6:	1f 91       	pop	r17
 1a8:	0f 91       	pop	r16
 1aa:	ff 90       	pop	r15
 1ac:	ef 90       	pop	r14
 1ae:	08 95       	ret

000001b0 <main>:
		_delay_ms(500);
	} while (temp_interrupt_counter !=interrupt_counter); // If still bouncing the interrupt_counter will change during the delay
};

int main(void)
{
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	cd b7       	in	r28, 0x3d	; 61
 1b6:	de b7       	in	r29, 0x3e	; 62
 1b8:	c0 58       	subi	r28, 0x80	; 128
 1ba:	d1 09       	sbc	r29, r1
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	f8 94       	cli
 1c0:	de bf       	out	0x3e, r29	; 62
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	cd bf       	out	0x3d, r28	; 61
#ifdef ISDEBUGGING
 char printBuffer[128];
#endif
	
	DDRC = 0x0;     // Clear all pins;
 1c6:	17 b8       	out	0x07, r1	; 7
	PORTC |= (1 << PORTC1) ; // Enables the pull-up
 1c8:	41 9a       	sbi	0x08, 1	; 8

	DDRB |= (1<<DDB1); // Set  pin 9 on Arduino Uno 328P for output
 1ca:	21 9a       	sbi	0x04, 1	; 4

    #ifdef ISDEBUGGING
		usart_init();
 1cc:	0e 94 7f 00 	call	0xfe	; 0xfe <usart_init>
    #endif
	enable_external_interrupt();
 1d0:	0e 94 53 00 	call	0xa6	; 0xa6 <enable_external_interrupt>
	adc_init();
 1d4:	0e 94 59 00 	call	0xb2	; 0xb2 <adc_init>
	// Timer1 setup:
	//COM1A1/COM1B1 = None-inverted mode (HIGH at bottom, LOW on match), WGM11=Fast PWM
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);
 1d8:	e0 e8       	ldi	r30, 0x80	; 128
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	82 6a       	ori	r24, 0xA2	; 162
 1e0:	80 83       	st	Z, r24
	// WGM12 & WGM13=Fast PWM, Prescaler=64
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10);
 1e2:	e1 e8       	ldi	r30, 0x81	; 129
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	8b 61       	ori	r24, 0x1B	; 27
 1ea:	80 83       	st	Z, r24
	// Set ICR1 register = PWM period
	ICR1 = TOP; 
 1ec:	87 e8       	ldi	r24, 0x87	; 135
 1ee:	93 e1       	ldi	r25, 0x13	; 19
 1f0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 1f4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>

	sei();
 1f8:	78 94       	sei
	
    while (1) 
    {
			ADCSRA |= (1 << ADSC); // Start the ADC conversion
 1fa:	0a e7       	ldi	r16, 0x7A	; 122
 1fc:	10 e0       	ldi	r17, 0x00	; 0
			}
			else
			{
				if(old_adc_value)
				{
					OCR1A=0;
 1fe:	0f 2e       	mov	r0, r31
 200:	f8 e8       	ldi	r31, 0x88	; 136
 202:	af 2e       	mov	r10, r31
 204:	b1 2c       	mov	r11, r1
 206:	f0 2d       	mov	r31, r0
    {
			ADCSRA |= (1 << ADSC); // Start the ADC conversion
			while(	ADCSRA	&	(1<<ADSC)	);
			if(switched_on)
			{
				adc_value=ADCL;
 208:	0f 2e       	mov	r0, r31
 20a:	f8 e7       	ldi	r31, 0x78	; 120
 20c:	cf 2e       	mov	r12, r31
 20e:	d1 2c       	mov	r13, r1
 210:	f0 2d       	mov	r31, r0
				adc_value = (ADCH<<8) + adc_value;
 212:	0f 2e       	mov	r0, r31
 214:	f9 e7       	ldi	r31, 0x79	; 121
 216:	ef 2e       	mov	r14, r31
 218:	f1 2c       	mov	r15, r1
 21a:	f0 2d       	mov	r31, r0
					
					OCR1A = ocr_value;
				
				#ifdef ISDEBUGGING
							
							sprintf(printBuffer, "adc_value %d ocr_value is %d\n",(int)adc_value, (int)ocr_value );
 21c:	0f 2e       	mov	r0, r31
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	6f 2e       	mov	r6, r31
 222:	f1 e0       	ldi	r31, 0x01	; 1
 224:	7f 2e       	mov	r7, r31
 226:	f0 2d       	mov	r31, r0
 228:	ce 01       	movw	r24, r28
 22a:	01 96       	adiw	r24, 0x01	; 1
 22c:	4c 01       	movw	r8, r24
 22e:	48 2e       	mov	r4, r24
 230:	59 2c       	mov	r5, r9

	sei();
	
    while (1) 
    {
			ADCSRA |= (1 << ADSC); // Start the ADC conversion
 232:	f8 01       	movw	r30, r16
 234:	80 81       	ld	r24, Z
 236:	80 64       	ori	r24, 0x40	; 64
 238:	80 83       	st	Z, r24
			while(	ADCSRA	&	(1<<ADSC)	);
 23a:	f8 01       	movw	r30, r16
 23c:	80 81       	ld	r24, Z
 23e:	86 fd       	sbrc	r24, 6
 240:	fc cf       	rjmp	.-8      	; 0x23a <main+0x8a>
			if(switched_on)
 242:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <switched_on>
 246:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <switched_on+0x1>
 24a:	89 2b       	or	r24, r25
 24c:	09 f4       	brne	.+2      	; 0x250 <main+0xa0>
 24e:	6a c0       	rjmp	.+212    	; 0x324 <main+0x174>
			{
				adc_value=ADCL;
 250:	f6 01       	movw	r30, r12
 252:	80 81       	ld	r24, Z
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <adc_value+0x1>
 25a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <adc_value>
				adc_value = (ADCH<<8) + adc_value;
 25e:	f7 01       	movw	r30, r14
 260:	90 81       	ld	r25, Z
 262:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <adc_value>
 266:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <adc_value+0x1>
 26a:	89 2f       	mov	r24, r25
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	98 2f       	mov	r25, r24
 270:	88 27       	eor	r24, r24
 272:	82 0f       	add	r24, r18
 274:	93 1f       	adc	r25, r19
 276:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <adc_value+0x1>
 27a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <adc_value>
				if (abs(adc_value-old_adc_value)>1)
 27e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <adc_value>
 282:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <adc_value+0x1>
 286:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <old_adc_value>
 28a:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <old_adc_value+0x1>
 28e:	82 1b       	sub	r24, r18
 290:	93 0b       	sbc	r25, r19
 292:	9c 01       	movw	r18, r24
 294:	22 f4       	brpl	.+8      	; 0x29e <main+0xee>
 296:	22 27       	eor	r18, r18
 298:	33 27       	eor	r19, r19
 29a:	28 1b       	sub	r18, r24
 29c:	39 0b       	sbc	r19, r25
 29e:	22 30       	cpi	r18, 0x02	; 2
 2a0:	31 05       	cpc	r19, r1
 2a2:	0c f4       	brge	.+2      	; 0x2a6 <main+0xf6>
 2a4:	4c c0       	rjmp	.+152    	; 0x33e <main+0x18e>
				{
					old_adc_value=adc_value;
 2a6:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <adc_value>
 2aa:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <adc_value+0x1>
 2ae:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <old_adc_value+0x1>
 2b2:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <old_adc_value>
					uint16_t ocr_value = 0.95*(double)adc_value*((double)TOP)/1024;
 2b6:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <adc_value>
 2ba:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <adc_value+0x1>
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 25 02 	call	0x44a	; 0x44a <__floatunsisf>
 2c6:	23 e3       	ldi	r18, 0x33	; 51
 2c8:	33 e3       	ldi	r19, 0x33	; 51
 2ca:	43 e7       	ldi	r20, 0x73	; 115
 2cc:	5f e3       	ldi	r21, 0x3F	; 63
 2ce:	0e 94 8b 02 	call	0x516	; 0x516 <__mulsf3>
 2d2:	20 e0       	ldi	r18, 0x00	; 0
 2d4:	38 e3       	ldi	r19, 0x38	; 56
 2d6:	4c e9       	ldi	r20, 0x9C	; 156
 2d8:	55 e4       	ldi	r21, 0x45	; 69
 2da:	0e 94 8b 02 	call	0x516	; 0x516 <__mulsf3>
 2de:	20 e0       	ldi	r18, 0x00	; 0
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	40 e8       	ldi	r20, 0x80	; 128
 2e4:	5a e3       	ldi	r21, 0x3A	; 58
 2e6:	0e 94 8b 02 	call	0x516	; 0x516 <__mulsf3>
 2ea:	0e 94 f6 01 	call	0x3ec	; 0x3ec <__fixunssfsi>
					
					OCR1A = ocr_value;
 2ee:	f5 01       	movw	r30, r10
 2f0:	71 83       	std	Z+1, r23	; 0x01
 2f2:	60 83       	st	Z, r22
				
				#ifdef ISDEBUGGING
							
							sprintf(printBuffer, "adc_value %d ocr_value is %d\n",(int)adc_value, (int)ocr_value );
 2f4:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <adc_value>
 2f8:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <adc_value+0x1>
 2fc:	7f 93       	push	r23
 2fe:	6f 93       	push	r22
 300:	3f 93       	push	r19
 302:	2f 93       	push	r18
 304:	7f 92       	push	r7
 306:	6f 92       	push	r6
 308:	9f 92       	push	r9
 30a:	8f 92       	push	r8
 30c:	0e 94 20 03 	call	0x640	; 0x640 <sprintf>
							USARTSendStr(printBuffer);
 310:	84 2d       	mov	r24, r4
 312:	95 2d       	mov	r25, r5
 314:	0e 94 b4 00 	call	0x168	; 0x168 <USARTSendStr>
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	f8 94       	cli
 31c:	de bf       	out	0x3e, r29	; 62
 31e:	0f be       	out	0x3f, r0	; 63
 320:	cd bf       	out	0x3d, r28	; 61
 322:	0d c0       	rjmp	.+26     	; 0x33e <main+0x18e>
				#endif
				}
			}
			else
			{
				if(old_adc_value)
 324:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <old_adc_value>
 328:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <old_adc_value+0x1>
 32c:	89 2b       	or	r24, r25
 32e:	39 f0       	breq	.+14     	; 0x33e <main+0x18e>
				{
					OCR1A=0;
 330:	f5 01       	movw	r30, r10
 332:	11 82       	std	Z+1, r1	; 0x01
 334:	10 82       	st	Z, r1
					old_adc_value=0;
 336:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <old_adc_value+0x1>
 33a:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <old_adc_value>
				}
				
			}
			if (debouncing) // wait a little if debouncing
 33e:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <debouncing>
 342:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <debouncing+0x1>
 346:	89 2b       	or	r24, r25
 348:	09 f4       	brne	.+2      	; 0x34c <main+0x19c>
 34a:	73 cf       	rjmp	.-282    	; 0x232 <main+0x82>
			{
				bounce_polling();
 34c:	0e 94 6a 00 	call	0xd4	; 0xd4 <bounce_polling>
				debouncing=0;
 350:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <debouncing+0x1>
 354:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <debouncing>
 358:	6c cf       	rjmp	.-296    	; 0x232 <main+0x82>

0000035a <__vector_4>:
			}
    }
}

ISR (PCINT1_vect)
{
 35a:	1f 92       	push	r1
 35c:	0f 92       	push	r0
 35e:	0f b6       	in	r0, 0x3f	; 63
 360:	0f 92       	push	r0
 362:	11 24       	eor	r1, r1
 364:	2f 93       	push	r18
 366:	3f 93       	push	r19
 368:	4f 93       	push	r20
 36a:	5f 93       	push	r21
 36c:	6f 93       	push	r22
 36e:	7f 93       	push	r23
 370:	8f 93       	push	r24
 372:	9f 93       	push	r25
 374:	af 93       	push	r26
 376:	bf 93       	push	r27
 378:	ef 93       	push	r30
 37a:	ff 93       	push	r31

	if (bit_is_clear(PINC, 1))
 37c:	31 99       	sbic	0x06, 1	; 6
 37e:	25 c0       	rjmp	.+74     	; 0x3ca <__vector_4+0x70>
	{
#ifdef ISDEBUGGING
			USARTSendStr("interrupt\n");
 380:	8e e1       	ldi	r24, 0x1E	; 30
 382:	91 e0       	ldi	r25, 0x01	; 1
 384:	0e 94 b4 00 	call	0x168	; 0x168 <USARTSendStr>
#endif
			interrupt_counter++;
 388:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 38c:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__data_end+0x1>
 390:	01 96       	adiw	r24, 0x01	; 1
 392:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__data_end+0x1>
 396:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>

			if (!debouncing)
 39a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <debouncing>
 39e:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <debouncing+0x1>
 3a2:	89 2b       	or	r24, r25
 3a4:	91 f4       	brne	.+36     	; 0x3ca <__vector_4+0x70>
			{
				debouncing=1;
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <debouncing+0x1>
 3ae:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <debouncing>
				switched_on = !switched_on; 
 3b2:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <switched_on>
 3b6:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <switched_on+0x1>
 3ba:	23 2b       	or	r18, r19
 3bc:	11 f0       	breq	.+4      	; 0x3c2 <__vector_4+0x68>
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <switched_on+0x1>
 3c6:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <switched_on>
			}
	}
}
 3ca:	ff 91       	pop	r31
 3cc:	ef 91       	pop	r30
 3ce:	bf 91       	pop	r27
 3d0:	af 91       	pop	r26
 3d2:	9f 91       	pop	r25
 3d4:	8f 91       	pop	r24
 3d6:	7f 91       	pop	r23
 3d8:	6f 91       	pop	r22
 3da:	5f 91       	pop	r21
 3dc:	4f 91       	pop	r20
 3de:	3f 91       	pop	r19
 3e0:	2f 91       	pop	r18
 3e2:	0f 90       	pop	r0
 3e4:	0f be       	out	0x3f, r0	; 63
 3e6:	0f 90       	pop	r0
 3e8:	1f 90       	pop	r1
 3ea:	18 95       	reti

000003ec <__fixunssfsi>:
 3ec:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__fp_splitA>
 3f0:	88 f0       	brcs	.+34     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3f2:	9f 57       	subi	r25, 0x7F	; 127
 3f4:	98 f0       	brcs	.+38     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 3f6:	b9 2f       	mov	r27, r25
 3f8:	99 27       	eor	r25, r25
 3fa:	b7 51       	subi	r27, 0x17	; 23
 3fc:	b0 f0       	brcs	.+44     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 3fe:	e1 f0       	breq	.+56     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 400:	66 0f       	add	r22, r22
 402:	77 1f       	adc	r23, r23
 404:	88 1f       	adc	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	1a f0       	brmi	.+6      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 40a:	ba 95       	dec	r27
 40c:	c9 f7       	brne	.-14     	; 0x400 <__LOCK_REGION_LENGTH__>
 40e:	14 c0       	rjmp	.+40     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 410:	b1 30       	cpi	r27, 0x01	; 1
 412:	91 f0       	breq	.+36     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 414:	0e 94 84 02 	call	0x508	; 0x508 <__fp_zero>
 418:	b1 e0       	ldi	r27, 0x01	; 1
 41a:	08 95       	ret
 41c:	0c 94 84 02 	jmp	0x508	; 0x508 <__fp_zero>
 420:	67 2f       	mov	r22, r23
 422:	78 2f       	mov	r23, r24
 424:	88 27       	eor	r24, r24
 426:	b8 5f       	subi	r27, 0xF8	; 248
 428:	39 f0       	breq	.+14     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 42a:	b9 3f       	cpi	r27, 0xF9	; 249
 42c:	cc f3       	brlt	.-14     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 42e:	86 95       	lsr	r24
 430:	77 95       	ror	r23
 432:	67 95       	ror	r22
 434:	b3 95       	inc	r27
 436:	d9 f7       	brne	.-10     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 438:	3e f4       	brtc	.+14     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 43a:	90 95       	com	r25
 43c:	80 95       	com	r24
 43e:	70 95       	com	r23
 440:	61 95       	neg	r22
 442:	7f 4f       	sbci	r23, 0xFF	; 255
 444:	8f 4f       	sbci	r24, 0xFF	; 255
 446:	9f 4f       	sbci	r25, 0xFF	; 255
 448:	08 95       	ret

0000044a <__floatunsisf>:
 44a:	e8 94       	clt
 44c:	09 c0       	rjmp	.+18     	; 0x460 <__floatsisf+0x12>

0000044e <__floatsisf>:
 44e:	97 fb       	bst	r25, 7
 450:	3e f4       	brtc	.+14     	; 0x460 <__floatsisf+0x12>
 452:	90 95       	com	r25
 454:	80 95       	com	r24
 456:	70 95       	com	r23
 458:	61 95       	neg	r22
 45a:	7f 4f       	sbci	r23, 0xFF	; 255
 45c:	8f 4f       	sbci	r24, 0xFF	; 255
 45e:	9f 4f       	sbci	r25, 0xFF	; 255
 460:	99 23       	and	r25, r25
 462:	a9 f0       	breq	.+42     	; 0x48e <__floatsisf+0x40>
 464:	f9 2f       	mov	r31, r25
 466:	96 e9       	ldi	r25, 0x96	; 150
 468:	bb 27       	eor	r27, r27
 46a:	93 95       	inc	r25
 46c:	f6 95       	lsr	r31
 46e:	87 95       	ror	r24
 470:	77 95       	ror	r23
 472:	67 95       	ror	r22
 474:	b7 95       	ror	r27
 476:	f1 11       	cpse	r31, r1
 478:	f8 cf       	rjmp	.-16     	; 0x46a <__floatsisf+0x1c>
 47a:	fa f4       	brpl	.+62     	; 0x4ba <__floatsisf+0x6c>
 47c:	bb 0f       	add	r27, r27
 47e:	11 f4       	brne	.+4      	; 0x484 <__floatsisf+0x36>
 480:	60 ff       	sbrs	r22, 0
 482:	1b c0       	rjmp	.+54     	; 0x4ba <__floatsisf+0x6c>
 484:	6f 5f       	subi	r22, 0xFF	; 255
 486:	7f 4f       	sbci	r23, 0xFF	; 255
 488:	8f 4f       	sbci	r24, 0xFF	; 255
 48a:	9f 4f       	sbci	r25, 0xFF	; 255
 48c:	16 c0       	rjmp	.+44     	; 0x4ba <__floatsisf+0x6c>
 48e:	88 23       	and	r24, r24
 490:	11 f0       	breq	.+4      	; 0x496 <__floatsisf+0x48>
 492:	96 e9       	ldi	r25, 0x96	; 150
 494:	11 c0       	rjmp	.+34     	; 0x4b8 <__floatsisf+0x6a>
 496:	77 23       	and	r23, r23
 498:	21 f0       	breq	.+8      	; 0x4a2 <__floatsisf+0x54>
 49a:	9e e8       	ldi	r25, 0x8E	; 142
 49c:	87 2f       	mov	r24, r23
 49e:	76 2f       	mov	r23, r22
 4a0:	05 c0       	rjmp	.+10     	; 0x4ac <__floatsisf+0x5e>
 4a2:	66 23       	and	r22, r22
 4a4:	71 f0       	breq	.+28     	; 0x4c2 <__floatsisf+0x74>
 4a6:	96 e8       	ldi	r25, 0x86	; 134
 4a8:	86 2f       	mov	r24, r22
 4aa:	70 e0       	ldi	r23, 0x00	; 0
 4ac:	60 e0       	ldi	r22, 0x00	; 0
 4ae:	2a f0       	brmi	.+10     	; 0x4ba <__floatsisf+0x6c>
 4b0:	9a 95       	dec	r25
 4b2:	66 0f       	add	r22, r22
 4b4:	77 1f       	adc	r23, r23
 4b6:	88 1f       	adc	r24, r24
 4b8:	da f7       	brpl	.-10     	; 0x4b0 <__floatsisf+0x62>
 4ba:	88 0f       	add	r24, r24
 4bc:	96 95       	lsr	r25
 4be:	87 95       	ror	r24
 4c0:	97 f9       	bld	r25, 7
 4c2:	08 95       	ret

000004c4 <__fp_split3>:
 4c4:	57 fd       	sbrc	r21, 7
 4c6:	90 58       	subi	r25, 0x80	; 128
 4c8:	44 0f       	add	r20, r20
 4ca:	55 1f       	adc	r21, r21
 4cc:	59 f0       	breq	.+22     	; 0x4e4 <__fp_splitA+0x10>
 4ce:	5f 3f       	cpi	r21, 0xFF	; 255
 4d0:	71 f0       	breq	.+28     	; 0x4ee <__fp_splitA+0x1a>
 4d2:	47 95       	ror	r20

000004d4 <__fp_splitA>:
 4d4:	88 0f       	add	r24, r24
 4d6:	97 fb       	bst	r25, 7
 4d8:	99 1f       	adc	r25, r25
 4da:	61 f0       	breq	.+24     	; 0x4f4 <__fp_splitA+0x20>
 4dc:	9f 3f       	cpi	r25, 0xFF	; 255
 4de:	79 f0       	breq	.+30     	; 0x4fe <__fp_splitA+0x2a>
 4e0:	87 95       	ror	r24
 4e2:	08 95       	ret
 4e4:	12 16       	cp	r1, r18
 4e6:	13 06       	cpc	r1, r19
 4e8:	14 06       	cpc	r1, r20
 4ea:	55 1f       	adc	r21, r21
 4ec:	f2 cf       	rjmp	.-28     	; 0x4d2 <__fp_split3+0xe>
 4ee:	46 95       	lsr	r20
 4f0:	f1 df       	rcall	.-30     	; 0x4d4 <__fp_splitA>
 4f2:	08 c0       	rjmp	.+16     	; 0x504 <__fp_splitA+0x30>
 4f4:	16 16       	cp	r1, r22
 4f6:	17 06       	cpc	r1, r23
 4f8:	18 06       	cpc	r1, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	f1 cf       	rjmp	.-30     	; 0x4e0 <__fp_splitA+0xc>
 4fe:	86 95       	lsr	r24
 500:	71 05       	cpc	r23, r1
 502:	61 05       	cpc	r22, r1
 504:	08 94       	sec
 506:	08 95       	ret

00000508 <__fp_zero>:
 508:	e8 94       	clt

0000050a <__fp_szero>:
 50a:	bb 27       	eor	r27, r27
 50c:	66 27       	eor	r22, r22
 50e:	77 27       	eor	r23, r23
 510:	cb 01       	movw	r24, r22
 512:	97 f9       	bld	r25, 7
 514:	08 95       	ret

00000516 <__mulsf3>:
 516:	0e 94 9e 02 	call	0x53c	; 0x53c <__mulsf3x>
 51a:	0c 94 0f 03 	jmp	0x61e	; 0x61e <__fp_round>
 51e:	0e 94 01 03 	call	0x602	; 0x602 <__fp_pscA>
 522:	38 f0       	brcs	.+14     	; 0x532 <__mulsf3+0x1c>
 524:	0e 94 08 03 	call	0x610	; 0x610 <__fp_pscB>
 528:	20 f0       	brcs	.+8      	; 0x532 <__mulsf3+0x1c>
 52a:	95 23       	and	r25, r21
 52c:	11 f0       	breq	.+4      	; 0x532 <__mulsf3+0x1c>
 52e:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <__fp_inf>
 532:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__fp_nan>
 536:	11 24       	eor	r1, r1
 538:	0c 94 85 02 	jmp	0x50a	; 0x50a <__fp_szero>

0000053c <__mulsf3x>:
 53c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__fp_split3>
 540:	70 f3       	brcs	.-36     	; 0x51e <__mulsf3+0x8>

00000542 <__mulsf3_pse>:
 542:	95 9f       	mul	r25, r21
 544:	c1 f3       	breq	.-16     	; 0x536 <__mulsf3+0x20>
 546:	95 0f       	add	r25, r21
 548:	50 e0       	ldi	r21, 0x00	; 0
 54a:	55 1f       	adc	r21, r21
 54c:	62 9f       	mul	r22, r18
 54e:	f0 01       	movw	r30, r0
 550:	72 9f       	mul	r23, r18
 552:	bb 27       	eor	r27, r27
 554:	f0 0d       	add	r31, r0
 556:	b1 1d       	adc	r27, r1
 558:	63 9f       	mul	r22, r19
 55a:	aa 27       	eor	r26, r26
 55c:	f0 0d       	add	r31, r0
 55e:	b1 1d       	adc	r27, r1
 560:	aa 1f       	adc	r26, r26
 562:	64 9f       	mul	r22, r20
 564:	66 27       	eor	r22, r22
 566:	b0 0d       	add	r27, r0
 568:	a1 1d       	adc	r26, r1
 56a:	66 1f       	adc	r22, r22
 56c:	82 9f       	mul	r24, r18
 56e:	22 27       	eor	r18, r18
 570:	b0 0d       	add	r27, r0
 572:	a1 1d       	adc	r26, r1
 574:	62 1f       	adc	r22, r18
 576:	73 9f       	mul	r23, r19
 578:	b0 0d       	add	r27, r0
 57a:	a1 1d       	adc	r26, r1
 57c:	62 1f       	adc	r22, r18
 57e:	83 9f       	mul	r24, r19
 580:	a0 0d       	add	r26, r0
 582:	61 1d       	adc	r22, r1
 584:	22 1f       	adc	r18, r18
 586:	74 9f       	mul	r23, r20
 588:	33 27       	eor	r19, r19
 58a:	a0 0d       	add	r26, r0
 58c:	61 1d       	adc	r22, r1
 58e:	23 1f       	adc	r18, r19
 590:	84 9f       	mul	r24, r20
 592:	60 0d       	add	r22, r0
 594:	21 1d       	adc	r18, r1
 596:	82 2f       	mov	r24, r18
 598:	76 2f       	mov	r23, r22
 59a:	6a 2f       	mov	r22, r26
 59c:	11 24       	eor	r1, r1
 59e:	9f 57       	subi	r25, 0x7F	; 127
 5a0:	50 40       	sbci	r21, 0x00	; 0
 5a2:	9a f0       	brmi	.+38     	; 0x5ca <__mulsf3_pse+0x88>
 5a4:	f1 f0       	breq	.+60     	; 0x5e2 <__mulsf3_pse+0xa0>
 5a6:	88 23       	and	r24, r24
 5a8:	4a f0       	brmi	.+18     	; 0x5bc <__mulsf3_pse+0x7a>
 5aa:	ee 0f       	add	r30, r30
 5ac:	ff 1f       	adc	r31, r31
 5ae:	bb 1f       	adc	r27, r27
 5b0:	66 1f       	adc	r22, r22
 5b2:	77 1f       	adc	r23, r23
 5b4:	88 1f       	adc	r24, r24
 5b6:	91 50       	subi	r25, 0x01	; 1
 5b8:	50 40       	sbci	r21, 0x00	; 0
 5ba:	a9 f7       	brne	.-22     	; 0x5a6 <__mulsf3_pse+0x64>
 5bc:	9e 3f       	cpi	r25, 0xFE	; 254
 5be:	51 05       	cpc	r21, r1
 5c0:	80 f0       	brcs	.+32     	; 0x5e2 <__mulsf3_pse+0xa0>
 5c2:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <__fp_inf>
 5c6:	0c 94 85 02 	jmp	0x50a	; 0x50a <__fp_szero>
 5ca:	5f 3f       	cpi	r21, 0xFF	; 255
 5cc:	e4 f3       	brlt	.-8      	; 0x5c6 <__mulsf3_pse+0x84>
 5ce:	98 3e       	cpi	r25, 0xE8	; 232
 5d0:	d4 f3       	brlt	.-12     	; 0x5c6 <__mulsf3_pse+0x84>
 5d2:	86 95       	lsr	r24
 5d4:	77 95       	ror	r23
 5d6:	67 95       	ror	r22
 5d8:	b7 95       	ror	r27
 5da:	f7 95       	ror	r31
 5dc:	e7 95       	ror	r30
 5de:	9f 5f       	subi	r25, 0xFF	; 255
 5e0:	c1 f7       	brne	.-16     	; 0x5d2 <__mulsf3_pse+0x90>
 5e2:	fe 2b       	or	r31, r30
 5e4:	88 0f       	add	r24, r24
 5e6:	91 1d       	adc	r25, r1
 5e8:	96 95       	lsr	r25
 5ea:	87 95       	ror	r24
 5ec:	97 f9       	bld	r25, 7
 5ee:	08 95       	ret

000005f0 <__fp_inf>:
 5f0:	97 f9       	bld	r25, 7
 5f2:	9f 67       	ori	r25, 0x7F	; 127
 5f4:	80 e8       	ldi	r24, 0x80	; 128
 5f6:	70 e0       	ldi	r23, 0x00	; 0
 5f8:	60 e0       	ldi	r22, 0x00	; 0
 5fa:	08 95       	ret

000005fc <__fp_nan>:
 5fc:	9f ef       	ldi	r25, 0xFF	; 255
 5fe:	80 ec       	ldi	r24, 0xC0	; 192
 600:	08 95       	ret

00000602 <__fp_pscA>:
 602:	00 24       	eor	r0, r0
 604:	0a 94       	dec	r0
 606:	16 16       	cp	r1, r22
 608:	17 06       	cpc	r1, r23
 60a:	18 06       	cpc	r1, r24
 60c:	09 06       	cpc	r0, r25
 60e:	08 95       	ret

00000610 <__fp_pscB>:
 610:	00 24       	eor	r0, r0
 612:	0a 94       	dec	r0
 614:	12 16       	cp	r1, r18
 616:	13 06       	cpc	r1, r19
 618:	14 06       	cpc	r1, r20
 61a:	05 06       	cpc	r0, r21
 61c:	08 95       	ret

0000061e <__fp_round>:
 61e:	09 2e       	mov	r0, r25
 620:	03 94       	inc	r0
 622:	00 0c       	add	r0, r0
 624:	11 f4       	brne	.+4      	; 0x62a <__fp_round+0xc>
 626:	88 23       	and	r24, r24
 628:	52 f0       	brmi	.+20     	; 0x63e <__fp_round+0x20>
 62a:	bb 0f       	add	r27, r27
 62c:	40 f4       	brcc	.+16     	; 0x63e <__fp_round+0x20>
 62e:	bf 2b       	or	r27, r31
 630:	11 f4       	brne	.+4      	; 0x636 <__fp_round+0x18>
 632:	60 ff       	sbrs	r22, 0
 634:	04 c0       	rjmp	.+8      	; 0x63e <__fp_round+0x20>
 636:	6f 5f       	subi	r22, 0xFF	; 255
 638:	7f 4f       	sbci	r23, 0xFF	; 255
 63a:	8f 4f       	sbci	r24, 0xFF	; 255
 63c:	9f 4f       	sbci	r25, 0xFF	; 255
 63e:	08 95       	ret

00000640 <sprintf>:
 640:	ae e0       	ldi	r26, 0x0E	; 14
 642:	b0 e0       	ldi	r27, 0x00	; 0
 644:	e6 e2       	ldi	r30, 0x26	; 38
 646:	f3 e0       	ldi	r31, 0x03	; 3
 648:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__prologue_saves__+0x1c>
 64c:	0d 89       	ldd	r16, Y+21	; 0x15
 64e:	1e 89       	ldd	r17, Y+22	; 0x16
 650:	86 e0       	ldi	r24, 0x06	; 6
 652:	8c 83       	std	Y+4, r24	; 0x04
 654:	1a 83       	std	Y+2, r17	; 0x02
 656:	09 83       	std	Y+1, r16	; 0x01
 658:	8f ef       	ldi	r24, 0xFF	; 255
 65a:	9f e7       	ldi	r25, 0x7F	; 127
 65c:	9e 83       	std	Y+6, r25	; 0x06
 65e:	8d 83       	std	Y+5, r24	; 0x05
 660:	ae 01       	movw	r20, r28
 662:	47 5e       	subi	r20, 0xE7	; 231
 664:	5f 4f       	sbci	r21, 0xFF	; 255
 666:	6f 89       	ldd	r22, Y+23	; 0x17
 668:	78 8d       	ldd	r23, Y+24	; 0x18
 66a:	ce 01       	movw	r24, r28
 66c:	01 96       	adiw	r24, 0x01	; 1
 66e:	0e 94 42 03 	call	0x684	; 0x684 <vfprintf>
 672:	ef 81       	ldd	r30, Y+7	; 0x07
 674:	f8 85       	ldd	r31, Y+8	; 0x08
 676:	e0 0f       	add	r30, r16
 678:	f1 1f       	adc	r31, r17
 67a:	10 82       	st	Z, r1
 67c:	2e 96       	adiw	r28, 0x0e	; 14
 67e:	e4 e0       	ldi	r30, 0x04	; 4
 680:	0c 94 fd 05 	jmp	0xbfa	; 0xbfa <__epilogue_restores__+0x1c>

00000684 <vfprintf>:
 684:	ab e0       	ldi	r26, 0x0B	; 11
 686:	b0 e0       	ldi	r27, 0x00	; 0
 688:	e8 e4       	ldi	r30, 0x48	; 72
 68a:	f3 e0       	ldi	r31, 0x03	; 3
 68c:	0c 94 d3 05 	jmp	0xba6	; 0xba6 <__prologue_saves__>
 690:	6c 01       	movw	r12, r24
 692:	7b 01       	movw	r14, r22
 694:	8a 01       	movw	r16, r20
 696:	fc 01       	movw	r30, r24
 698:	17 82       	std	Z+7, r1	; 0x07
 69a:	16 82       	std	Z+6, r1	; 0x06
 69c:	83 81       	ldd	r24, Z+3	; 0x03
 69e:	81 ff       	sbrs	r24, 1
 6a0:	cc c1       	rjmp	.+920    	; 0xa3a <__stack+0x13b>
 6a2:	ce 01       	movw	r24, r28
 6a4:	01 96       	adiw	r24, 0x01	; 1
 6a6:	3c 01       	movw	r6, r24
 6a8:	f6 01       	movw	r30, r12
 6aa:	93 81       	ldd	r25, Z+3	; 0x03
 6ac:	f7 01       	movw	r30, r14
 6ae:	93 fd       	sbrc	r25, 3
 6b0:	85 91       	lpm	r24, Z+
 6b2:	93 ff       	sbrs	r25, 3
 6b4:	81 91       	ld	r24, Z+
 6b6:	7f 01       	movw	r14, r30
 6b8:	88 23       	and	r24, r24
 6ba:	09 f4       	brne	.+2      	; 0x6be <vfprintf+0x3a>
 6bc:	ba c1       	rjmp	.+884    	; 0xa32 <__stack+0x133>
 6be:	85 32       	cpi	r24, 0x25	; 37
 6c0:	39 f4       	brne	.+14     	; 0x6d0 <vfprintf+0x4c>
 6c2:	93 fd       	sbrc	r25, 3
 6c4:	85 91       	lpm	r24, Z+
 6c6:	93 ff       	sbrs	r25, 3
 6c8:	81 91       	ld	r24, Z+
 6ca:	7f 01       	movw	r14, r30
 6cc:	85 32       	cpi	r24, 0x25	; 37
 6ce:	29 f4       	brne	.+10     	; 0x6da <vfprintf+0x56>
 6d0:	b6 01       	movw	r22, r12
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	0e 94 39 05 	call	0xa72	; 0xa72 <fputc>
 6d8:	e7 cf       	rjmp	.-50     	; 0x6a8 <vfprintf+0x24>
 6da:	91 2c       	mov	r9, r1
 6dc:	21 2c       	mov	r2, r1
 6de:	31 2c       	mov	r3, r1
 6e0:	ff e1       	ldi	r31, 0x1F	; 31
 6e2:	f3 15       	cp	r31, r3
 6e4:	d8 f0       	brcs	.+54     	; 0x71c <vfprintf+0x98>
 6e6:	8b 32       	cpi	r24, 0x2B	; 43
 6e8:	79 f0       	breq	.+30     	; 0x708 <vfprintf+0x84>
 6ea:	38 f4       	brcc	.+14     	; 0x6fa <vfprintf+0x76>
 6ec:	80 32       	cpi	r24, 0x20	; 32
 6ee:	79 f0       	breq	.+30     	; 0x70e <vfprintf+0x8a>
 6f0:	83 32       	cpi	r24, 0x23	; 35
 6f2:	a1 f4       	brne	.+40     	; 0x71c <vfprintf+0x98>
 6f4:	23 2d       	mov	r18, r3
 6f6:	20 61       	ori	r18, 0x10	; 16
 6f8:	1d c0       	rjmp	.+58     	; 0x734 <vfprintf+0xb0>
 6fa:	8d 32       	cpi	r24, 0x2D	; 45
 6fc:	61 f0       	breq	.+24     	; 0x716 <vfprintf+0x92>
 6fe:	80 33       	cpi	r24, 0x30	; 48
 700:	69 f4       	brne	.+26     	; 0x71c <vfprintf+0x98>
 702:	23 2d       	mov	r18, r3
 704:	21 60       	ori	r18, 0x01	; 1
 706:	16 c0       	rjmp	.+44     	; 0x734 <vfprintf+0xb0>
 708:	83 2d       	mov	r24, r3
 70a:	82 60       	ori	r24, 0x02	; 2
 70c:	38 2e       	mov	r3, r24
 70e:	e3 2d       	mov	r30, r3
 710:	e4 60       	ori	r30, 0x04	; 4
 712:	3e 2e       	mov	r3, r30
 714:	2a c0       	rjmp	.+84     	; 0x76a <vfprintf+0xe6>
 716:	f3 2d       	mov	r31, r3
 718:	f8 60       	ori	r31, 0x08	; 8
 71a:	1d c0       	rjmp	.+58     	; 0x756 <vfprintf+0xd2>
 71c:	37 fc       	sbrc	r3, 7
 71e:	2d c0       	rjmp	.+90     	; 0x77a <vfprintf+0xf6>
 720:	20 ed       	ldi	r18, 0xD0	; 208
 722:	28 0f       	add	r18, r24
 724:	2a 30       	cpi	r18, 0x0A	; 10
 726:	40 f0       	brcs	.+16     	; 0x738 <vfprintf+0xb4>
 728:	8e 32       	cpi	r24, 0x2E	; 46
 72a:	b9 f4       	brne	.+46     	; 0x75a <vfprintf+0xd6>
 72c:	36 fc       	sbrc	r3, 6
 72e:	81 c1       	rjmp	.+770    	; 0xa32 <__stack+0x133>
 730:	23 2d       	mov	r18, r3
 732:	20 64       	ori	r18, 0x40	; 64
 734:	32 2e       	mov	r3, r18
 736:	19 c0       	rjmp	.+50     	; 0x76a <vfprintf+0xe6>
 738:	36 fe       	sbrs	r3, 6
 73a:	06 c0       	rjmp	.+12     	; 0x748 <vfprintf+0xc4>
 73c:	8a e0       	ldi	r24, 0x0A	; 10
 73e:	98 9e       	mul	r9, r24
 740:	20 0d       	add	r18, r0
 742:	11 24       	eor	r1, r1
 744:	92 2e       	mov	r9, r18
 746:	11 c0       	rjmp	.+34     	; 0x76a <vfprintf+0xe6>
 748:	ea e0       	ldi	r30, 0x0A	; 10
 74a:	2e 9e       	mul	r2, r30
 74c:	20 0d       	add	r18, r0
 74e:	11 24       	eor	r1, r1
 750:	22 2e       	mov	r2, r18
 752:	f3 2d       	mov	r31, r3
 754:	f0 62       	ori	r31, 0x20	; 32
 756:	3f 2e       	mov	r3, r31
 758:	08 c0       	rjmp	.+16     	; 0x76a <vfprintf+0xe6>
 75a:	8c 36       	cpi	r24, 0x6C	; 108
 75c:	21 f4       	brne	.+8      	; 0x766 <vfprintf+0xe2>
 75e:	83 2d       	mov	r24, r3
 760:	80 68       	ori	r24, 0x80	; 128
 762:	38 2e       	mov	r3, r24
 764:	02 c0       	rjmp	.+4      	; 0x76a <vfprintf+0xe6>
 766:	88 36       	cpi	r24, 0x68	; 104
 768:	41 f4       	brne	.+16     	; 0x77a <vfprintf+0xf6>
 76a:	f7 01       	movw	r30, r14
 76c:	93 fd       	sbrc	r25, 3
 76e:	85 91       	lpm	r24, Z+
 770:	93 ff       	sbrs	r25, 3
 772:	81 91       	ld	r24, Z+
 774:	7f 01       	movw	r14, r30
 776:	81 11       	cpse	r24, r1
 778:	b3 cf       	rjmp	.-154    	; 0x6e0 <vfprintf+0x5c>
 77a:	98 2f       	mov	r25, r24
 77c:	9f 7d       	andi	r25, 0xDF	; 223
 77e:	95 54       	subi	r25, 0x45	; 69
 780:	93 30       	cpi	r25, 0x03	; 3
 782:	28 f4       	brcc	.+10     	; 0x78e <vfprintf+0x10a>
 784:	0c 5f       	subi	r16, 0xFC	; 252
 786:	1f 4f       	sbci	r17, 0xFF	; 255
 788:	9f e3       	ldi	r25, 0x3F	; 63
 78a:	99 83       	std	Y+1, r25	; 0x01
 78c:	0d c0       	rjmp	.+26     	; 0x7a8 <vfprintf+0x124>
 78e:	83 36       	cpi	r24, 0x63	; 99
 790:	31 f0       	breq	.+12     	; 0x79e <vfprintf+0x11a>
 792:	83 37       	cpi	r24, 0x73	; 115
 794:	71 f0       	breq	.+28     	; 0x7b2 <vfprintf+0x12e>
 796:	83 35       	cpi	r24, 0x53	; 83
 798:	09 f0       	breq	.+2      	; 0x79c <vfprintf+0x118>
 79a:	59 c0       	rjmp	.+178    	; 0x84e <vfprintf+0x1ca>
 79c:	21 c0       	rjmp	.+66     	; 0x7e0 <vfprintf+0x15c>
 79e:	f8 01       	movw	r30, r16
 7a0:	80 81       	ld	r24, Z
 7a2:	89 83       	std	Y+1, r24	; 0x01
 7a4:	0e 5f       	subi	r16, 0xFE	; 254
 7a6:	1f 4f       	sbci	r17, 0xFF	; 255
 7a8:	88 24       	eor	r8, r8
 7aa:	83 94       	inc	r8
 7ac:	91 2c       	mov	r9, r1
 7ae:	53 01       	movw	r10, r6
 7b0:	13 c0       	rjmp	.+38     	; 0x7d8 <vfprintf+0x154>
 7b2:	28 01       	movw	r4, r16
 7b4:	f2 e0       	ldi	r31, 0x02	; 2
 7b6:	4f 0e       	add	r4, r31
 7b8:	51 1c       	adc	r5, r1
 7ba:	f8 01       	movw	r30, r16
 7bc:	a0 80       	ld	r10, Z
 7be:	b1 80       	ldd	r11, Z+1	; 0x01
 7c0:	36 fe       	sbrs	r3, 6
 7c2:	03 c0       	rjmp	.+6      	; 0x7ca <vfprintf+0x146>
 7c4:	69 2d       	mov	r22, r9
 7c6:	70 e0       	ldi	r23, 0x00	; 0
 7c8:	02 c0       	rjmp	.+4      	; 0x7ce <vfprintf+0x14a>
 7ca:	6f ef       	ldi	r22, 0xFF	; 255
 7cc:	7f ef       	ldi	r23, 0xFF	; 255
 7ce:	c5 01       	movw	r24, r10
 7d0:	0e 94 2e 05 	call	0xa5c	; 0xa5c <strnlen>
 7d4:	4c 01       	movw	r8, r24
 7d6:	82 01       	movw	r16, r4
 7d8:	f3 2d       	mov	r31, r3
 7da:	ff 77       	andi	r31, 0x7F	; 127
 7dc:	3f 2e       	mov	r3, r31
 7de:	16 c0       	rjmp	.+44     	; 0x80c <vfprintf+0x188>
 7e0:	28 01       	movw	r4, r16
 7e2:	22 e0       	ldi	r18, 0x02	; 2
 7e4:	42 0e       	add	r4, r18
 7e6:	51 1c       	adc	r5, r1
 7e8:	f8 01       	movw	r30, r16
 7ea:	a0 80       	ld	r10, Z
 7ec:	b1 80       	ldd	r11, Z+1	; 0x01
 7ee:	36 fe       	sbrs	r3, 6
 7f0:	03 c0       	rjmp	.+6      	; 0x7f8 <vfprintf+0x174>
 7f2:	69 2d       	mov	r22, r9
 7f4:	70 e0       	ldi	r23, 0x00	; 0
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <vfprintf+0x178>
 7f8:	6f ef       	ldi	r22, 0xFF	; 255
 7fa:	7f ef       	ldi	r23, 0xFF	; 255
 7fc:	c5 01       	movw	r24, r10
 7fe:	0e 94 23 05 	call	0xa46	; 0xa46 <strnlen_P>
 802:	4c 01       	movw	r8, r24
 804:	f3 2d       	mov	r31, r3
 806:	f0 68       	ori	r31, 0x80	; 128
 808:	3f 2e       	mov	r3, r31
 80a:	82 01       	movw	r16, r4
 80c:	33 fc       	sbrc	r3, 3
 80e:	1b c0       	rjmp	.+54     	; 0x846 <vfprintf+0x1c2>
 810:	82 2d       	mov	r24, r2
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	88 16       	cp	r8, r24
 816:	99 06       	cpc	r9, r25
 818:	b0 f4       	brcc	.+44     	; 0x846 <vfprintf+0x1c2>
 81a:	b6 01       	movw	r22, r12
 81c:	80 e2       	ldi	r24, 0x20	; 32
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	0e 94 39 05 	call	0xa72	; 0xa72 <fputc>
 824:	2a 94       	dec	r2
 826:	f4 cf       	rjmp	.-24     	; 0x810 <vfprintf+0x18c>
 828:	f5 01       	movw	r30, r10
 82a:	37 fc       	sbrc	r3, 7
 82c:	85 91       	lpm	r24, Z+
 82e:	37 fe       	sbrs	r3, 7
 830:	81 91       	ld	r24, Z+
 832:	5f 01       	movw	r10, r30
 834:	b6 01       	movw	r22, r12
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	0e 94 39 05 	call	0xa72	; 0xa72 <fputc>
 83c:	21 10       	cpse	r2, r1
 83e:	2a 94       	dec	r2
 840:	21 e0       	ldi	r18, 0x01	; 1
 842:	82 1a       	sub	r8, r18
 844:	91 08       	sbc	r9, r1
 846:	81 14       	cp	r8, r1
 848:	91 04       	cpc	r9, r1
 84a:	71 f7       	brne	.-36     	; 0x828 <vfprintf+0x1a4>
 84c:	e8 c0       	rjmp	.+464    	; 0xa1e <__stack+0x11f>
 84e:	84 36       	cpi	r24, 0x64	; 100
 850:	11 f0       	breq	.+4      	; 0x856 <vfprintf+0x1d2>
 852:	89 36       	cpi	r24, 0x69	; 105
 854:	41 f5       	brne	.+80     	; 0x8a6 <vfprintf+0x222>
 856:	f8 01       	movw	r30, r16
 858:	37 fe       	sbrs	r3, 7
 85a:	07 c0       	rjmp	.+14     	; 0x86a <vfprintf+0x1e6>
 85c:	60 81       	ld	r22, Z
 85e:	71 81       	ldd	r23, Z+1	; 0x01
 860:	82 81       	ldd	r24, Z+2	; 0x02
 862:	93 81       	ldd	r25, Z+3	; 0x03
 864:	0c 5f       	subi	r16, 0xFC	; 252
 866:	1f 4f       	sbci	r17, 0xFF	; 255
 868:	08 c0       	rjmp	.+16     	; 0x87a <vfprintf+0x1f6>
 86a:	60 81       	ld	r22, Z
 86c:	71 81       	ldd	r23, Z+1	; 0x01
 86e:	07 2e       	mov	r0, r23
 870:	00 0c       	add	r0, r0
 872:	88 0b       	sbc	r24, r24
 874:	99 0b       	sbc	r25, r25
 876:	0e 5f       	subi	r16, 0xFE	; 254
 878:	1f 4f       	sbci	r17, 0xFF	; 255
 87a:	f3 2d       	mov	r31, r3
 87c:	ff 76       	andi	r31, 0x6F	; 111
 87e:	3f 2e       	mov	r3, r31
 880:	97 ff       	sbrs	r25, 7
 882:	09 c0       	rjmp	.+18     	; 0x896 <vfprintf+0x212>
 884:	90 95       	com	r25
 886:	80 95       	com	r24
 888:	70 95       	com	r23
 88a:	61 95       	neg	r22
 88c:	7f 4f       	sbci	r23, 0xFF	; 255
 88e:	8f 4f       	sbci	r24, 0xFF	; 255
 890:	9f 4f       	sbci	r25, 0xFF	; 255
 892:	f0 68       	ori	r31, 0x80	; 128
 894:	3f 2e       	mov	r3, r31
 896:	2a e0       	ldi	r18, 0x0A	; 10
 898:	30 e0       	ldi	r19, 0x00	; 0
 89a:	a3 01       	movw	r20, r6
 89c:	0e 94 75 05 	call	0xaea	; 0xaea <__ultoa_invert>
 8a0:	88 2e       	mov	r8, r24
 8a2:	86 18       	sub	r8, r6
 8a4:	45 c0       	rjmp	.+138    	; 0x930 <__stack+0x31>
 8a6:	85 37       	cpi	r24, 0x75	; 117
 8a8:	31 f4       	brne	.+12     	; 0x8b6 <vfprintf+0x232>
 8aa:	23 2d       	mov	r18, r3
 8ac:	2f 7e       	andi	r18, 0xEF	; 239
 8ae:	b2 2e       	mov	r11, r18
 8b0:	2a e0       	ldi	r18, 0x0A	; 10
 8b2:	30 e0       	ldi	r19, 0x00	; 0
 8b4:	25 c0       	rjmp	.+74     	; 0x900 <__stack+0x1>
 8b6:	93 2d       	mov	r25, r3
 8b8:	99 7f       	andi	r25, 0xF9	; 249
 8ba:	b9 2e       	mov	r11, r25
 8bc:	8f 36       	cpi	r24, 0x6F	; 111
 8be:	c1 f0       	breq	.+48     	; 0x8f0 <vfprintf+0x26c>
 8c0:	18 f4       	brcc	.+6      	; 0x8c8 <vfprintf+0x244>
 8c2:	88 35       	cpi	r24, 0x58	; 88
 8c4:	79 f0       	breq	.+30     	; 0x8e4 <vfprintf+0x260>
 8c6:	b5 c0       	rjmp	.+362    	; 0xa32 <__stack+0x133>
 8c8:	80 37       	cpi	r24, 0x70	; 112
 8ca:	19 f0       	breq	.+6      	; 0x8d2 <vfprintf+0x24e>
 8cc:	88 37       	cpi	r24, 0x78	; 120
 8ce:	21 f0       	breq	.+8      	; 0x8d8 <vfprintf+0x254>
 8d0:	b0 c0       	rjmp	.+352    	; 0xa32 <__stack+0x133>
 8d2:	e9 2f       	mov	r30, r25
 8d4:	e0 61       	ori	r30, 0x10	; 16
 8d6:	be 2e       	mov	r11, r30
 8d8:	b4 fe       	sbrs	r11, 4
 8da:	0d c0       	rjmp	.+26     	; 0x8f6 <vfprintf+0x272>
 8dc:	fb 2d       	mov	r31, r11
 8de:	f4 60       	ori	r31, 0x04	; 4
 8e0:	bf 2e       	mov	r11, r31
 8e2:	09 c0       	rjmp	.+18     	; 0x8f6 <vfprintf+0x272>
 8e4:	34 fe       	sbrs	r3, 4
 8e6:	0a c0       	rjmp	.+20     	; 0x8fc <vfprintf+0x278>
 8e8:	29 2f       	mov	r18, r25
 8ea:	26 60       	ori	r18, 0x06	; 6
 8ec:	b2 2e       	mov	r11, r18
 8ee:	06 c0       	rjmp	.+12     	; 0x8fc <vfprintf+0x278>
 8f0:	28 e0       	ldi	r18, 0x08	; 8
 8f2:	30 e0       	ldi	r19, 0x00	; 0
 8f4:	05 c0       	rjmp	.+10     	; 0x900 <__stack+0x1>
 8f6:	20 e1       	ldi	r18, 0x10	; 16
 8f8:	30 e0       	ldi	r19, 0x00	; 0
 8fa:	02 c0       	rjmp	.+4      	; 0x900 <__stack+0x1>
 8fc:	20 e1       	ldi	r18, 0x10	; 16
 8fe:	32 e0       	ldi	r19, 0x02	; 2
 900:	f8 01       	movw	r30, r16
 902:	b7 fe       	sbrs	r11, 7
 904:	07 c0       	rjmp	.+14     	; 0x914 <__stack+0x15>
 906:	60 81       	ld	r22, Z
 908:	71 81       	ldd	r23, Z+1	; 0x01
 90a:	82 81       	ldd	r24, Z+2	; 0x02
 90c:	93 81       	ldd	r25, Z+3	; 0x03
 90e:	0c 5f       	subi	r16, 0xFC	; 252
 910:	1f 4f       	sbci	r17, 0xFF	; 255
 912:	06 c0       	rjmp	.+12     	; 0x920 <__stack+0x21>
 914:	60 81       	ld	r22, Z
 916:	71 81       	ldd	r23, Z+1	; 0x01
 918:	80 e0       	ldi	r24, 0x00	; 0
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	0e 5f       	subi	r16, 0xFE	; 254
 91e:	1f 4f       	sbci	r17, 0xFF	; 255
 920:	a3 01       	movw	r20, r6
 922:	0e 94 75 05 	call	0xaea	; 0xaea <__ultoa_invert>
 926:	88 2e       	mov	r8, r24
 928:	86 18       	sub	r8, r6
 92a:	fb 2d       	mov	r31, r11
 92c:	ff 77       	andi	r31, 0x7F	; 127
 92e:	3f 2e       	mov	r3, r31
 930:	36 fe       	sbrs	r3, 6
 932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0x4f>
 934:	23 2d       	mov	r18, r3
 936:	2e 7f       	andi	r18, 0xFE	; 254
 938:	a2 2e       	mov	r10, r18
 93a:	89 14       	cp	r8, r9
 93c:	58 f4       	brcc	.+22     	; 0x954 <__stack+0x55>
 93e:	34 fe       	sbrs	r3, 4
 940:	0b c0       	rjmp	.+22     	; 0x958 <__stack+0x59>
 942:	32 fc       	sbrc	r3, 2
 944:	09 c0       	rjmp	.+18     	; 0x958 <__stack+0x59>
 946:	83 2d       	mov	r24, r3
 948:	8e 7e       	andi	r24, 0xEE	; 238
 94a:	a8 2e       	mov	r10, r24
 94c:	05 c0       	rjmp	.+10     	; 0x958 <__stack+0x59>
 94e:	b8 2c       	mov	r11, r8
 950:	a3 2c       	mov	r10, r3
 952:	03 c0       	rjmp	.+6      	; 0x95a <__stack+0x5b>
 954:	b8 2c       	mov	r11, r8
 956:	01 c0       	rjmp	.+2      	; 0x95a <__stack+0x5b>
 958:	b9 2c       	mov	r11, r9
 95a:	a4 fe       	sbrs	r10, 4
 95c:	0f c0       	rjmp	.+30     	; 0x97c <__stack+0x7d>
 95e:	fe 01       	movw	r30, r28
 960:	e8 0d       	add	r30, r8
 962:	f1 1d       	adc	r31, r1
 964:	80 81       	ld	r24, Z
 966:	80 33       	cpi	r24, 0x30	; 48
 968:	21 f4       	brne	.+8      	; 0x972 <__stack+0x73>
 96a:	9a 2d       	mov	r25, r10
 96c:	99 7e       	andi	r25, 0xE9	; 233
 96e:	a9 2e       	mov	r10, r25
 970:	09 c0       	rjmp	.+18     	; 0x984 <__stack+0x85>
 972:	a2 fe       	sbrs	r10, 2
 974:	06 c0       	rjmp	.+12     	; 0x982 <__stack+0x83>
 976:	b3 94       	inc	r11
 978:	b3 94       	inc	r11
 97a:	04 c0       	rjmp	.+8      	; 0x984 <__stack+0x85>
 97c:	8a 2d       	mov	r24, r10
 97e:	86 78       	andi	r24, 0x86	; 134
 980:	09 f0       	breq	.+2      	; 0x984 <__stack+0x85>
 982:	b3 94       	inc	r11
 984:	a3 fc       	sbrc	r10, 3
 986:	11 c0       	rjmp	.+34     	; 0x9aa <__stack+0xab>
 988:	a0 fe       	sbrs	r10, 0
 98a:	06 c0       	rjmp	.+12     	; 0x998 <__stack+0x99>
 98c:	b2 14       	cp	r11, r2
 98e:	88 f4       	brcc	.+34     	; 0x9b2 <__stack+0xb3>
 990:	28 0c       	add	r2, r8
 992:	92 2c       	mov	r9, r2
 994:	9b 18       	sub	r9, r11
 996:	0e c0       	rjmp	.+28     	; 0x9b4 <__stack+0xb5>
 998:	b2 14       	cp	r11, r2
 99a:	60 f4       	brcc	.+24     	; 0x9b4 <__stack+0xb5>
 99c:	b6 01       	movw	r22, r12
 99e:	80 e2       	ldi	r24, 0x20	; 32
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	0e 94 39 05 	call	0xa72	; 0xa72 <fputc>
 9a6:	b3 94       	inc	r11
 9a8:	f7 cf       	rjmp	.-18     	; 0x998 <__stack+0x99>
 9aa:	b2 14       	cp	r11, r2
 9ac:	18 f4       	brcc	.+6      	; 0x9b4 <__stack+0xb5>
 9ae:	2b 18       	sub	r2, r11
 9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <__stack+0xb7>
 9b2:	98 2c       	mov	r9, r8
 9b4:	21 2c       	mov	r2, r1
 9b6:	a4 fe       	sbrs	r10, 4
 9b8:	10 c0       	rjmp	.+32     	; 0x9da <__stack+0xdb>
 9ba:	b6 01       	movw	r22, r12
 9bc:	80 e3       	ldi	r24, 0x30	; 48
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	0e 94 39 05 	call	0xa72	; 0xa72 <fputc>
 9c4:	a2 fe       	sbrs	r10, 2
 9c6:	17 c0       	rjmp	.+46     	; 0x9f6 <__stack+0xf7>
 9c8:	a1 fc       	sbrc	r10, 1
 9ca:	03 c0       	rjmp	.+6      	; 0x9d2 <__stack+0xd3>
 9cc:	88 e7       	ldi	r24, 0x78	; 120
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <__stack+0xd7>
 9d2:	88 e5       	ldi	r24, 0x58	; 88
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	b6 01       	movw	r22, r12
 9d8:	0c c0       	rjmp	.+24     	; 0x9f2 <__stack+0xf3>
 9da:	8a 2d       	mov	r24, r10
 9dc:	86 78       	andi	r24, 0x86	; 134
 9de:	59 f0       	breq	.+22     	; 0x9f6 <__stack+0xf7>
 9e0:	a1 fe       	sbrs	r10, 1
 9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <__stack+0xe9>
 9e4:	8b e2       	ldi	r24, 0x2B	; 43
 9e6:	01 c0       	rjmp	.+2      	; 0x9ea <__stack+0xeb>
 9e8:	80 e2       	ldi	r24, 0x20	; 32
 9ea:	a7 fc       	sbrc	r10, 7
 9ec:	8d e2       	ldi	r24, 0x2D	; 45
 9ee:	b6 01       	movw	r22, r12
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	0e 94 39 05 	call	0xa72	; 0xa72 <fputc>
 9f6:	89 14       	cp	r8, r9
 9f8:	38 f4       	brcc	.+14     	; 0xa08 <__stack+0x109>
 9fa:	b6 01       	movw	r22, r12
 9fc:	80 e3       	ldi	r24, 0x30	; 48
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	0e 94 39 05 	call	0xa72	; 0xa72 <fputc>
 a04:	9a 94       	dec	r9
 a06:	f7 cf       	rjmp	.-18     	; 0x9f6 <__stack+0xf7>
 a08:	8a 94       	dec	r8
 a0a:	f3 01       	movw	r30, r6
 a0c:	e8 0d       	add	r30, r8
 a0e:	f1 1d       	adc	r31, r1
 a10:	80 81       	ld	r24, Z
 a12:	b6 01       	movw	r22, r12
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	0e 94 39 05 	call	0xa72	; 0xa72 <fputc>
 a1a:	81 10       	cpse	r8, r1
 a1c:	f5 cf       	rjmp	.-22     	; 0xa08 <__stack+0x109>
 a1e:	22 20       	and	r2, r2
 a20:	09 f4       	brne	.+2      	; 0xa24 <__stack+0x125>
 a22:	42 ce       	rjmp	.-892    	; 0x6a8 <vfprintf+0x24>
 a24:	b6 01       	movw	r22, r12
 a26:	80 e2       	ldi	r24, 0x20	; 32
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	0e 94 39 05 	call	0xa72	; 0xa72 <fputc>
 a2e:	2a 94       	dec	r2
 a30:	f6 cf       	rjmp	.-20     	; 0xa1e <__stack+0x11f>
 a32:	f6 01       	movw	r30, r12
 a34:	86 81       	ldd	r24, Z+6	; 0x06
 a36:	97 81       	ldd	r25, Z+7	; 0x07
 a38:	02 c0       	rjmp	.+4      	; 0xa3e <__stack+0x13f>
 a3a:	8f ef       	ldi	r24, 0xFF	; 255
 a3c:	9f ef       	ldi	r25, 0xFF	; 255
 a3e:	2b 96       	adiw	r28, 0x0b	; 11
 a40:	e2 e1       	ldi	r30, 0x12	; 18
 a42:	0c 94 ef 05 	jmp	0xbde	; 0xbde <__epilogue_restores__>

00000a46 <strnlen_P>:
 a46:	fc 01       	movw	r30, r24
 a48:	05 90       	lpm	r0, Z+
 a4a:	61 50       	subi	r22, 0x01	; 1
 a4c:	70 40       	sbci	r23, 0x00	; 0
 a4e:	01 10       	cpse	r0, r1
 a50:	d8 f7       	brcc	.-10     	; 0xa48 <strnlen_P+0x2>
 a52:	80 95       	com	r24
 a54:	90 95       	com	r25
 a56:	8e 0f       	add	r24, r30
 a58:	9f 1f       	adc	r25, r31
 a5a:	08 95       	ret

00000a5c <strnlen>:
 a5c:	fc 01       	movw	r30, r24
 a5e:	61 50       	subi	r22, 0x01	; 1
 a60:	70 40       	sbci	r23, 0x00	; 0
 a62:	01 90       	ld	r0, Z+
 a64:	01 10       	cpse	r0, r1
 a66:	d8 f7       	brcc	.-10     	; 0xa5e <strnlen+0x2>
 a68:	80 95       	com	r24
 a6a:	90 95       	com	r25
 a6c:	8e 0f       	add	r24, r30
 a6e:	9f 1f       	adc	r25, r31
 a70:	08 95       	ret

00000a72 <fputc>:
 a72:	0f 93       	push	r16
 a74:	1f 93       	push	r17
 a76:	cf 93       	push	r28
 a78:	df 93       	push	r29
 a7a:	fb 01       	movw	r30, r22
 a7c:	23 81       	ldd	r18, Z+3	; 0x03
 a7e:	21 fd       	sbrc	r18, 1
 a80:	03 c0       	rjmp	.+6      	; 0xa88 <fputc+0x16>
 a82:	8f ef       	ldi	r24, 0xFF	; 255
 a84:	9f ef       	ldi	r25, 0xFF	; 255
 a86:	2c c0       	rjmp	.+88     	; 0xae0 <fputc+0x6e>
 a88:	22 ff       	sbrs	r18, 2
 a8a:	16 c0       	rjmp	.+44     	; 0xab8 <fputc+0x46>
 a8c:	46 81       	ldd	r20, Z+6	; 0x06
 a8e:	57 81       	ldd	r21, Z+7	; 0x07
 a90:	24 81       	ldd	r18, Z+4	; 0x04
 a92:	35 81       	ldd	r19, Z+5	; 0x05
 a94:	42 17       	cp	r20, r18
 a96:	53 07       	cpc	r21, r19
 a98:	44 f4       	brge	.+16     	; 0xaaa <fputc+0x38>
 a9a:	a0 81       	ld	r26, Z
 a9c:	b1 81       	ldd	r27, Z+1	; 0x01
 a9e:	9d 01       	movw	r18, r26
 aa0:	2f 5f       	subi	r18, 0xFF	; 255
 aa2:	3f 4f       	sbci	r19, 0xFF	; 255
 aa4:	31 83       	std	Z+1, r19	; 0x01
 aa6:	20 83       	st	Z, r18
 aa8:	8c 93       	st	X, r24
 aaa:	26 81       	ldd	r18, Z+6	; 0x06
 aac:	37 81       	ldd	r19, Z+7	; 0x07
 aae:	2f 5f       	subi	r18, 0xFF	; 255
 ab0:	3f 4f       	sbci	r19, 0xFF	; 255
 ab2:	37 83       	std	Z+7, r19	; 0x07
 ab4:	26 83       	std	Z+6, r18	; 0x06
 ab6:	14 c0       	rjmp	.+40     	; 0xae0 <fputc+0x6e>
 ab8:	8b 01       	movw	r16, r22
 aba:	ec 01       	movw	r28, r24
 abc:	fb 01       	movw	r30, r22
 abe:	00 84       	ldd	r0, Z+8	; 0x08
 ac0:	f1 85       	ldd	r31, Z+9	; 0x09
 ac2:	e0 2d       	mov	r30, r0
 ac4:	09 95       	icall
 ac6:	89 2b       	or	r24, r25
 ac8:	e1 f6       	brne	.-72     	; 0xa82 <fputc+0x10>
 aca:	d8 01       	movw	r26, r16
 acc:	16 96       	adiw	r26, 0x06	; 6
 ace:	8d 91       	ld	r24, X+
 ad0:	9c 91       	ld	r25, X
 ad2:	17 97       	sbiw	r26, 0x07	; 7
 ad4:	01 96       	adiw	r24, 0x01	; 1
 ad6:	17 96       	adiw	r26, 0x07	; 7
 ad8:	9c 93       	st	X, r25
 ada:	8e 93       	st	-X, r24
 adc:	16 97       	sbiw	r26, 0x06	; 6
 ade:	ce 01       	movw	r24, r28
 ae0:	df 91       	pop	r29
 ae2:	cf 91       	pop	r28
 ae4:	1f 91       	pop	r17
 ae6:	0f 91       	pop	r16
 ae8:	08 95       	ret

00000aea <__ultoa_invert>:
 aea:	fa 01       	movw	r30, r20
 aec:	aa 27       	eor	r26, r26
 aee:	28 30       	cpi	r18, 0x08	; 8
 af0:	51 f1       	breq	.+84     	; 0xb46 <__ultoa_invert+0x5c>
 af2:	20 31       	cpi	r18, 0x10	; 16
 af4:	81 f1       	breq	.+96     	; 0xb56 <__ultoa_invert+0x6c>
 af6:	e8 94       	clt
 af8:	6f 93       	push	r22
 afa:	6e 7f       	andi	r22, 0xFE	; 254
 afc:	6e 5f       	subi	r22, 0xFE	; 254
 afe:	7f 4f       	sbci	r23, 0xFF	; 255
 b00:	8f 4f       	sbci	r24, 0xFF	; 255
 b02:	9f 4f       	sbci	r25, 0xFF	; 255
 b04:	af 4f       	sbci	r26, 0xFF	; 255
 b06:	b1 e0       	ldi	r27, 0x01	; 1
 b08:	3e d0       	rcall	.+124    	; 0xb86 <__ultoa_invert+0x9c>
 b0a:	b4 e0       	ldi	r27, 0x04	; 4
 b0c:	3c d0       	rcall	.+120    	; 0xb86 <__ultoa_invert+0x9c>
 b0e:	67 0f       	add	r22, r23
 b10:	78 1f       	adc	r23, r24
 b12:	89 1f       	adc	r24, r25
 b14:	9a 1f       	adc	r25, r26
 b16:	a1 1d       	adc	r26, r1
 b18:	68 0f       	add	r22, r24
 b1a:	79 1f       	adc	r23, r25
 b1c:	8a 1f       	adc	r24, r26
 b1e:	91 1d       	adc	r25, r1
 b20:	a1 1d       	adc	r26, r1
 b22:	6a 0f       	add	r22, r26
 b24:	71 1d       	adc	r23, r1
 b26:	81 1d       	adc	r24, r1
 b28:	91 1d       	adc	r25, r1
 b2a:	a1 1d       	adc	r26, r1
 b2c:	20 d0       	rcall	.+64     	; 0xb6e <__ultoa_invert+0x84>
 b2e:	09 f4       	brne	.+2      	; 0xb32 <__ultoa_invert+0x48>
 b30:	68 94       	set
 b32:	3f 91       	pop	r19
 b34:	2a e0       	ldi	r18, 0x0A	; 10
 b36:	26 9f       	mul	r18, r22
 b38:	11 24       	eor	r1, r1
 b3a:	30 19       	sub	r19, r0
 b3c:	30 5d       	subi	r19, 0xD0	; 208
 b3e:	31 93       	st	Z+, r19
 b40:	de f6       	brtc	.-74     	; 0xaf8 <__ultoa_invert+0xe>
 b42:	cf 01       	movw	r24, r30
 b44:	08 95       	ret
 b46:	46 2f       	mov	r20, r22
 b48:	47 70       	andi	r20, 0x07	; 7
 b4a:	40 5d       	subi	r20, 0xD0	; 208
 b4c:	41 93       	st	Z+, r20
 b4e:	b3 e0       	ldi	r27, 0x03	; 3
 b50:	0f d0       	rcall	.+30     	; 0xb70 <__ultoa_invert+0x86>
 b52:	c9 f7       	brne	.-14     	; 0xb46 <__ultoa_invert+0x5c>
 b54:	f6 cf       	rjmp	.-20     	; 0xb42 <__ultoa_invert+0x58>
 b56:	46 2f       	mov	r20, r22
 b58:	4f 70       	andi	r20, 0x0F	; 15
 b5a:	40 5d       	subi	r20, 0xD0	; 208
 b5c:	4a 33       	cpi	r20, 0x3A	; 58
 b5e:	18 f0       	brcs	.+6      	; 0xb66 <__ultoa_invert+0x7c>
 b60:	49 5d       	subi	r20, 0xD9	; 217
 b62:	31 fd       	sbrc	r19, 1
 b64:	40 52       	subi	r20, 0x20	; 32
 b66:	41 93       	st	Z+, r20
 b68:	02 d0       	rcall	.+4      	; 0xb6e <__ultoa_invert+0x84>
 b6a:	a9 f7       	brne	.-22     	; 0xb56 <__ultoa_invert+0x6c>
 b6c:	ea cf       	rjmp	.-44     	; 0xb42 <__ultoa_invert+0x58>
 b6e:	b4 e0       	ldi	r27, 0x04	; 4
 b70:	a6 95       	lsr	r26
 b72:	97 95       	ror	r25
 b74:	87 95       	ror	r24
 b76:	77 95       	ror	r23
 b78:	67 95       	ror	r22
 b7a:	ba 95       	dec	r27
 b7c:	c9 f7       	brne	.-14     	; 0xb70 <__ultoa_invert+0x86>
 b7e:	00 97       	sbiw	r24, 0x00	; 0
 b80:	61 05       	cpc	r22, r1
 b82:	71 05       	cpc	r23, r1
 b84:	08 95       	ret
 b86:	9b 01       	movw	r18, r22
 b88:	ac 01       	movw	r20, r24
 b8a:	0a 2e       	mov	r0, r26
 b8c:	06 94       	lsr	r0
 b8e:	57 95       	ror	r21
 b90:	47 95       	ror	r20
 b92:	37 95       	ror	r19
 b94:	27 95       	ror	r18
 b96:	ba 95       	dec	r27
 b98:	c9 f7       	brne	.-14     	; 0xb8c <__ultoa_invert+0xa2>
 b9a:	62 0f       	add	r22, r18
 b9c:	73 1f       	adc	r23, r19
 b9e:	84 1f       	adc	r24, r20
 ba0:	95 1f       	adc	r25, r21
 ba2:	a0 1d       	adc	r26, r0
 ba4:	08 95       	ret

00000ba6 <__prologue_saves__>:
 ba6:	2f 92       	push	r2
 ba8:	3f 92       	push	r3
 baa:	4f 92       	push	r4
 bac:	5f 92       	push	r5
 bae:	6f 92       	push	r6
 bb0:	7f 92       	push	r7
 bb2:	8f 92       	push	r8
 bb4:	9f 92       	push	r9
 bb6:	af 92       	push	r10
 bb8:	bf 92       	push	r11
 bba:	cf 92       	push	r12
 bbc:	df 92       	push	r13
 bbe:	ef 92       	push	r14
 bc0:	ff 92       	push	r15
 bc2:	0f 93       	push	r16
 bc4:	1f 93       	push	r17
 bc6:	cf 93       	push	r28
 bc8:	df 93       	push	r29
 bca:	cd b7       	in	r28, 0x3d	; 61
 bcc:	de b7       	in	r29, 0x3e	; 62
 bce:	ca 1b       	sub	r28, r26
 bd0:	db 0b       	sbc	r29, r27
 bd2:	0f b6       	in	r0, 0x3f	; 63
 bd4:	f8 94       	cli
 bd6:	de bf       	out	0x3e, r29	; 62
 bd8:	0f be       	out	0x3f, r0	; 63
 bda:	cd bf       	out	0x3d, r28	; 61
 bdc:	09 94       	ijmp

00000bde <__epilogue_restores__>:
 bde:	2a 88       	ldd	r2, Y+18	; 0x12
 be0:	39 88       	ldd	r3, Y+17	; 0x11
 be2:	48 88       	ldd	r4, Y+16	; 0x10
 be4:	5f 84       	ldd	r5, Y+15	; 0x0f
 be6:	6e 84       	ldd	r6, Y+14	; 0x0e
 be8:	7d 84       	ldd	r7, Y+13	; 0x0d
 bea:	8c 84       	ldd	r8, Y+12	; 0x0c
 bec:	9b 84       	ldd	r9, Y+11	; 0x0b
 bee:	aa 84       	ldd	r10, Y+10	; 0x0a
 bf0:	b9 84       	ldd	r11, Y+9	; 0x09
 bf2:	c8 84       	ldd	r12, Y+8	; 0x08
 bf4:	df 80       	ldd	r13, Y+7	; 0x07
 bf6:	ee 80       	ldd	r14, Y+6	; 0x06
 bf8:	fd 80       	ldd	r15, Y+5	; 0x05
 bfa:	0c 81       	ldd	r16, Y+4	; 0x04
 bfc:	1b 81       	ldd	r17, Y+3	; 0x03
 bfe:	aa 81       	ldd	r26, Y+2	; 0x02
 c00:	b9 81       	ldd	r27, Y+1	; 0x01
 c02:	ce 0f       	add	r28, r30
 c04:	d1 1d       	adc	r29, r1
 c06:	0f b6       	in	r0, 0x3f	; 63
 c08:	f8 94       	cli
 c0a:	de bf       	out	0x3e, r29	; 62
 c0c:	0f be       	out	0x3f, r0	; 63
 c0e:	cd bf       	out	0x3d, r28	; 61
 c10:	ed 01       	movw	r28, r26
 c12:	08 95       	ret

00000c14 <_exit>:
 c14:	f8 94       	cli

00000c16 <__stop_program>:
 c16:	ff cf       	rjmp	.-2      	; 0xc16 <__stop_program>
